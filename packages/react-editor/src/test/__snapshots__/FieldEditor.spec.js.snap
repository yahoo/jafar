// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FieldEditor Should render component when props are defined - ok 1`] = `
<ThemeProvider
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "augmentColor": [Function],
        "background": Object {
          "default": "#fafafa",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "rgb(174, 105, 9)",
          "light": "rgb(250, 171, 61)",
          "main": "#F9970D",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "rgb(94, 109, 118)",
          "light": "rgb(159, 175, 186)",
          "main": "#879CA9",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "6rem",
          "fontWeight": 300,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.167,
        },
        "h2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3.75rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.2,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.167,
        },
        "h4": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "2.125rem",
          "fontWeight": 400,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.235,
        },
        "h5": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.5rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.334,
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 500,
          "letterSpacing": "0.0075em",
          "lineHeight": 1.6,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <FieldEditor
    component={[Function]}
    props={
      Object {
        "field": Object {
          "path": "firstName",
        },
        "fieldId": "firstName",
        "fieldIds": Array [
          "firstName",
          "lastName",
          "address",
        ],
        "formId": "employee",
        "onCancel": [Function],
        "onSave": [Function],
      }
    }
  >
    <Form
      model={
        Object {
          "context": Object {
            "fieldIds": Array [],
          },
          "data": Object {
            "id": undefined,
          },
          "fields": Object {
            "component": Object {
              "component": Object {
                "name": "Handler",
                "state": Object {
                  "addArgsLabel": "Add initial state",
                  "argsName": "state",
                  "options": Array [
                    "AsyncMultiSelect",
                    "AsyncSelect",
                    "CreatableMultiSelect",
                    "DatePicker",
                    "DateTimePicker",
                    "UrlInput",
                    "TextInput",
                    "NumberInput",
                    "PasswordInput",
                    "RadioGroup",
                    "Checkbox",
                    "CheckboxCollection",
                    "Select",
                    "MultiSelect",
                    "JsonEditor",
                    "TimePicker",
                    "Url",
                    "Switch",
                    "JsonView",
                    "Boolean",
                    "Date",
                    "Text",
                    "Number",
                  ],
                  "urlPrefix": "https://yahoo.github.io/jafar/demo-react-components.html#",
                },
              },
              "description": "Reflects the UI component",
              "label": "Component",
              "path": "component",
              "validators": Array [
                "customNameRequired",
              ],
            },
            "dependencies": Object {
              "component": Object {
                "name": "MultiSelectFields",
                "state": Object {
                  "items": Array [],
                  "searchable": true,
                },
              },
              "context": Array [
                "fieldIds",
              ],
              "description": "Reflects the fields that this field depends on that will cause it to re-evaluate when their value changes",
              "label": "Dependencies",
              "path": "dependencies",
            },
            "dependenciesChange": Object {
              "component": Object {
                "name": "Handler",
                "state": Object {
                  "options": Array [],
                },
              },
              "dependencies": Array [
                "dependencies",
              ],
              "description": "Represent a name of a function that will be triggered when one of the fields dependencies value changes",
              "excludeTerm": Object {
                "args": Object {
                  "fieldId": "dependencies",
                },
                "name": "empty",
              },
              "label": "Dependencies Change",
              "path": "dependenciesChange",
              "validators": Array [
                "customNameRequired",
              ],
            },
            "description": Object {
              "component": Object {
                "name": "TextInput",
              },
              "description": "Descriptive text that describes the field",
              "label": "Description",
              "path": "description",
            },
            "disableTerm": Object {
              "component": Object {
                "name": "Term",
              },
              "description": "Represent a regular expression that determine if the field value is disabled",
              "label": "Disable Term",
              "path": "disableTerm",
            },
            "excludeTerm": Object {
              "component": Object {
                "name": "Term",
              },
              "description": "Represent a regular expression that determine if the field value is excluded",
              "label": "Exclude Term",
              "path": "excludeTerm",
            },
            "formatter": Object {
              "component": Object {
                "name": "Handler",
                "state": Object {
                  "options": Array [
                    "toString",
                    "toNumber",
                    "toDate",
                    "toBoolean",
                    "formatDate",
                    "split",
                    "join",
                    "joinKeys",
                    "joinValues",
                    "jsonStringify",
                    "jsonParse",
                  ],
                  "urlPrefix": "https://yahoo.github.io/jafar/docs/formatter-parser#",
                },
              },
              "dependencies": Array [
                "component",
              ],
              "description": "Represent the formatter function that convert field's data value to component value",
              "excludeTerm": Object {
                "args": Object {
                  "fieldId": "component",
                },
                "name": "empty",
              },
              "label": "Formatter",
              "path": "formatter",
              "validators": Array [
                "customNameRequired",
              ],
            },
            "id": Object {
              "component": Object {
                "name": "TextInput",
              },
              "context": Array [
                "fieldIds",
              ],
              "description": "Unique field ID",
              "label": "Id",
              "path": "id",
              "required": true,
              "validators": Array [
                Object {
                  "name": "uniqueId",
                },
              ],
            },
            "label": Object {
              "component": Object {
                "name": "TextInput",
              },
              "description": "Label of the field that will be rendered next to the component",
              "label": "Label",
              "path": "label",
            },
            "parser": Object {
              "component": Object {
                "name": "Handler",
                "state": Object {
                  "options": Array [
                    "toString",
                    "toNumber",
                    "toDate",
                    "toBoolean",
                    "formatDate",
                    "split",
                    "join",
                    "joinKeys",
                    "joinValues",
                    "jsonStringify",
                    "jsonParse",
                  ],
                  "urlPrefix": "https://yahoo.github.io/jafar/docs/formatter-parser#",
                },
              },
              "dependencies": Array [
                "component",
              ],
              "description": "Represent the parser function that convert field's component value to data value",
              "excludeTerm": Object {
                "args": Object {
                  "fieldId": "component",
                },
                "name": "empty",
              },
              "label": "Parser",
              "path": "parser",
              "validators": Array [
                "customNameRequired",
              ],
            },
            "path": Object {
              "component": Object {
                "name": "TextInput",
              },
              "description": "Path to the value on the data object. Example 'address.home'",
              "label": "Path",
              "path": "path",
              "required": true,
            },
            "requireTerm": Object {
              "component": Object {
                "name": "Term",
              },
              "description": "Represent a regular expression that determine if the field value is required",
              "label": "Require Term",
              "path": "requireTerm",
            },
            "required": Object {
              "component": Object {
                "name": "Checkbox",
                "state": Object {
                  "label": "Enabled",
                },
              },
              "description": "Reflects whether the user must enter a value",
              "formatter": Object {
                "name": "unChanged",
              },
              "label": "Required",
              "parser": Object {
                "name": "falsyToUndefined",
              },
              "path": "required",
            },
            "validators": Object {
              "component": Object {
                "name": "Validators",
              },
              "description": "Represent a set of functions that determine if the field value is valid",
              "label": "Validators",
              "path": "validators",
              "validators": Array [
                Object {
                  "name": "validatorsNamesRequired",
                },
              ],
            },
          },
          "id": "edit-field",
        }
      }
      resources={
        Object {
          "components": Object {
            "Checkbox": [Function],
            "Handler": [Function],
            "MultiSelectFields": Object {
              "renderer": [Function],
              "stateChange": [Function],
            },
            "Term": [Function],
            "TextInput": [Function],
            "Validators": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "displayName": "WithTheme(Component)",
              "propTypes": Object {
                "innerRef": [Function],
              },
              "render": [Function],
            },
          },
          "conversions": Object {
            "falsyToUndefined": [Function],
            "unChanged": [Function],
          },
          "validators": Object {
            "customNameRequired": Object {
              "func": [Function],
              "message": [Function],
            },
            "uniqueId": Object {
              "func": [Function],
              "message": [Function],
            },
            "validatorsNamesRequired": Object {
              "func": [Function],
              "message": [Function],
            },
          },
        }
      }
    >
      <BaseItem
        onCancel={[Function]}
        onSave={[Function]}
        sections={
          Array [
            Object {
              "boxes": Array [
                Object {
                  "boxes": Array [
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "id",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "path",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "dependencies",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "dependenciesChange",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                  ],
                  "direction": "row",
                },
              ],
              "id": "basic",
              "title": "Basic",
            },
            Object {
              "boxes": Array [
                Object {
                  "boxes": Array [
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "required",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "validators",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                  ],
                  "direction": "row",
                },
              ],
              "id": "validations",
              "title": "Validations",
            },
            Object {
              "boxes": Array [
                Object {
                  "boxes": Array [
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "disableTerm",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "excludeTerm",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "requireTerm",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "100%",
                        "width": "100%",
                      },
                    },
                  ],
                  "direction": "row",
                },
              ],
              "id": "terms",
              "title": "Terms",
            },
            Object {
              "boxes": Array [
                Object {
                  "boxes": Array [
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "label",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "component",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "description",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "formatter",
                          },
                        },
                        Object {
                          "component": [Function],
                          "props": Object {
                            "id": "parser",
                          },
                        },
                      ],
                      "direction": "column",
                      "style": Object {
                        "margin": "0 30px 0 0",
                        "maxWidth": "400px",
                        "width": "400px",
                      },
                    },
                  ],
                  "direction": "row",
                },
              ],
              "id": "ui",
              "title": "UI",
            },
          ]
        }
        title="Field - new / new"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-iAyFgw",
                  "isStatic": false,
                  "lastClassName": "hgwOjX",
                  "rules": Array [
                    "
  flex: 1;
  height: 100%;
  display: flex;
  flex-direction: row;

  > div {
    flex: 1;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-iAyFgw",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-iAyFgw hgwOjX"
            >
              <Item
                layout="scroll"
                mainActions={
                  Array [
                    Object {
                      "label": "Cancel",
                      "onClick": [Function],
                      "type": "tertiary",
                    },
                    Object {
                      "disable": [Function],
                      "label": "Save",
                      "onClick": [Function],
                      "popover": Object {
                        "component": [Function],
                        "open": [Function],
                        "props": Object {
                          "onClickField": [Function],
                        },
                        "targetRef": Object {
                          "current": <button
                            button-type="primary"
                            class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                            tabindex="0"
                            type="button"
                          >
                            <span
                              class="MuiButton-label"
                            >
                              Save
                            </span>
                            <span
                              class="MuiTouchRipple-root"
                            />
                          </button>,
                        },
                        "title": "Handle Fields",
                      },
                      "type": "primary",
                    },
                  ]
                }
                optionsActions={
                  Array [
                    Object {
                      "label": "Show Json",
                      "onClick": [Function],
                    },
                  ]
                }
                sections={
                  Array [
                    Object {
                      "boxes": Array [
                        Object {
                          "boxes": Array [
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "id",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "path",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "dependencies",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "dependenciesChange",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                          ],
                          "direction": "row",
                        },
                      ],
                      "id": "basic",
                      "title": "Basic",
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "boxes": Array [
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "required",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "validators",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                          ],
                          "direction": "row",
                        },
                      ],
                      "id": "validations",
                      "title": "Validations",
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "boxes": Array [
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "disableTerm",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "excludeTerm",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "requireTerm",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "100%",
                                "width": "100%",
                              },
                            },
                          ],
                          "direction": "row",
                        },
                      ],
                      "id": "terms",
                      "title": "Terms",
                    },
                    Object {
                      "boxes": Array [
                        Object {
                          "boxes": Array [
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "label",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "component",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                            Object {
                              "boxes": Array [
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "description",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "formatter",
                                  },
                                },
                                Object {
                                  "component": [Function],
                                  "props": Object {
                                    "id": "parser",
                                  },
                                },
                              ],
                              "direction": "column",
                              "style": Object {
                                "margin": "0 30px 0 0",
                                "maxWidth": "400px",
                                "width": "400px",
                              },
                            },
                          ],
                          "direction": "row",
                        },
                      ],
                      "id": "ui",
                      "title": "UI",
                    },
                  ]
                }
                title="Field - new / new"
              >
                <ItemView
                  footer={
                    Object {
                      "actions": Array [
                        Object {
                          "disabled": undefined,
                          "label": "Cancel",
                          "onClick": [Function],
                          "type": "tertiary",
                        },
                        Object {
                          "disable": [Function],
                          "disabled": false,
                          "elementRef": Object {
                            "current": <button
                              button-type="primary"
                              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                              tabindex="0"
                              type="button"
                            >
                              <span
                                class="MuiButton-label"
                              >
                                Save
                              </span>
                              <span
                                class="MuiTouchRipple-root"
                              />
                            </button>,
                          },
                          "label": "Save",
                          "onClick": [Function],
                          "popover": Object {
                            "component": [Function],
                            "open": [Function],
                            "props": Object {
                              "onClickField": [Function],
                            },
                            "targetRef": Object {
                              "current": <button
                                button-type="primary"
                                class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                tabindex="0"
                                type="button"
                              >
                                <span
                                  class="MuiButton-label"
                                >
                                  Save
                                </span>
                                <span
                                  class="MuiTouchRipple-root"
                                />
                              </button>,
                            },
                            "title": "Handle Fields",
                          },
                          "type": "primary",
                        },
                      ],
                    }
                  }
                  options={
                    Object {
                      "actions": Array [
                        Object {
                          "disabled": undefined,
                          "label": "Show Json",
                          "onClick": [Function],
                        },
                      ],
                    }
                  }
                  sections={
                    Array [
                      Object {
                        "boxes": Array [
                          Object {
                            "boxes": Array [
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "id",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "path",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "dependencies",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "dependenciesChange",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                            ],
                            "direction": "row",
                          },
                        ],
                        "id": "basic",
                        "ref": Object {
                          "current": <div
                            class="sc-dnqmqq psgzJ"
                            id="basic"
                          >
                            <h3
                              class="sc-iwsKbI gaRpVe"
                            >
                              Basic
                            </h3>
                            <div
                              class="sc-gzVnrw jKdxIN"
                            >
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                            </div>
                          </div>,
                        },
                        "title": "Basic",
                      },
                      Object {
                        "boxes": Array [
                          Object {
                            "boxes": Array [
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "required",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "validators",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                            ],
                            "direction": "row",
                          },
                        ],
                        "id": "validations",
                        "ref": Object {
                          "current": <div
                            class="sc-dnqmqq psgzJ"
                            id="validations"
                          >
                            <h3
                              class="sc-iwsKbI gaRpVe"
                            >
                              Validations
                            </h3>
                            <div
                              class="sc-gzVnrw jKdxIN"
                            >
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                            </div>
                          </div>,
                        },
                        "title": "Validations",
                      },
                      Object {
                        "boxes": Array [
                          Object {
                            "boxes": Array [
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "disableTerm",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "excludeTerm",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "requireTerm",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "100%",
                                  "width": "100%",
                                },
                              },
                            ],
                            "direction": "row",
                          },
                        ],
                        "id": "terms",
                        "ref": Object {
                          "current": <div
                            class="sc-dnqmqq psgzJ"
                            id="terms"
                          >
                            <h3
                              class="sc-iwsKbI gaRpVe"
                            >
                              Terms
                            </h3>
                            <div
                              class="sc-gzVnrw jKdxIN"
                            >
                              <div
                                class="sc-bZQynM bwibdY"
                                width="100%"
                              />
                            </div>
                          </div>,
                        },
                        "title": "Terms",
                      },
                      Object {
                        "boxes": Array [
                          Object {
                            "boxes": Array [
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "label",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "component",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                              Object {
                                "boxes": Array [
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "description",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "formatter",
                                    },
                                  },
                                  Object {
                                    "component": [Function],
                                    "props": Object {
                                      "id": "parser",
                                    },
                                  },
                                ],
                                "direction": "column",
                                "style": Object {
                                  "margin": "0 30px 0 0",
                                  "maxWidth": "400px",
                                  "width": "400px",
                                },
                              },
                            ],
                            "direction": "row",
                          },
                        ],
                        "id": "ui",
                        "ref": Object {
                          "current": <div
                            class="sc-dnqmqq psgzJ"
                            id="ui"
                          >
                            <h3
                              class="sc-iwsKbI gaRpVe"
                            >
                              UI
                            </h3>
                            <div
                              class="sc-gzVnrw jKdxIN"
                            >
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                              <div
                                class="sc-bZQynM clIlZD"
                                width="400px"
                              />
                            </div>
                          </div>,
                        },
                        "title": "UI",
                      },
                    ]
                  }
                  sectionsRef={
                    Object {
                      "current": <div
                        aria-label="Sections"
                        class="sc-kGXeez eRBpYu"
                      >
                        <div
                          class="sc-dnqmqq psgzJ"
                          id="basic"
                        >
                          <h3
                            class="sc-iwsKbI gaRpVe"
                          >
                            Basic
                          </h3>
                          <div
                            class="sc-gzVnrw jKdxIN"
                          >
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                          </div>
                        </div>
                        <div
                          class="sc-dnqmqq psgzJ"
                          id="validations"
                        >
                          <h3
                            class="sc-iwsKbI gaRpVe"
                          >
                            Validations
                          </h3>
                          <div
                            class="sc-gzVnrw jKdxIN"
                          >
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                          </div>
                        </div>
                        <div
                          class="sc-dnqmqq psgzJ"
                          id="terms"
                        >
                          <h3
                            class="sc-iwsKbI gaRpVe"
                          >
                            Terms
                          </h3>
                          <div
                            class="sc-gzVnrw jKdxIN"
                          >
                            <div
                              class="sc-bZQynM bwibdY"
                              width="100%"
                            />
                          </div>
                        </div>
                        <div
                          class="sc-dnqmqq psgzJ"
                          id="ui"
                        >
                          <h3
                            class="sc-iwsKbI gaRpVe"
                          >
                            UI
                          </h3>
                          <div
                            class="sc-gzVnrw jKdxIN"
                          >
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                            <div
                              class="sc-bZQynM clIlZD"
                              width="400px"
                            />
                          </div>
                        </div>
                      </div>,
                    }
                  }
                  tabs={
                    Object {
                      "items": Array [
                        Object {
                          "label": "Basic",
                          "value": "basic",
                        },
                        Object {
                          "label": "Validations",
                          "value": "validations",
                        },
                        Object {
                          "label": "Terms",
                          "value": "terms",
                        },
                        Object {
                          "label": "UI",
                          "value": "ui",
                        },
                      ],
                      "onChange": [Function],
                      "value": "basic",
                    }
                  }
                  title="Field - new / new"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "fSPMWM",
                            "rules": Array [
                              "
    color: #3d3d3d;
    background-color: #fff;
    height:100%;
    display: flex;
    flex-direction: column;
  ",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-jzJRlG fSPMWM"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-cSHVUG",
                                  "isStatic": false,
                                  "lastClassName": "iKyJud",
                                  "rules": Array [
                                    "
    flex: 0 0 auto;
    padding: 0 50px;
    border-bottom: 3px solid #e1e1e1;
    position: relative;
    min-height: 48px;
    position: relative;
  ",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-cSHVUG",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-cSHVUG iKyJud"
                            >
                              <styled.h3
                                hasTabs={true}
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-chPdSV",
                                        "isStatic": false,
                                        "lastClassName": "exIrrj",
                                        "rules": Array [
                                          "
    font-size: 28px;
    font-weight: 500;
    margin: 0;
    padding: ",
                                          [Function],
                                          ";
  ",
                                        ],
                                      },
                                      "displayName": "styled.h3",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-chPdSV",
                                      "target": "h3",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  hasTabs={true}
                                >
                                  <h3
                                    className="sc-chPdSV exIrrj"
                                  >
                                    Field - new / new
                                  </h3>
                                </StyledComponent>
                              </styled.h3>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-kAzzGY",
                                        "isStatic": false,
                                        "lastClassName": "etYhcl",
                                        "rules": Array [
                                          "
    position: absolute;
    right: 15px;
    bottom: 0;
  ",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-kAzzGY",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-kAzzGY etYhcl"
                                  >
                                    <Options
                                      options={
                                        Array [
                                          Object {
                                            "disabled": undefined,
                                            "label": "Show Json",
                                            "onClick": [Function],
                                          },
                                        ]
                                      }
                                    >
                                      <div>
                                        <WithStyles(ForwardRef(IconButton))
                                          aria-haspopup="true"
                                          aria-label="Options"
                                          color="primary"
                                          onClick={[Function]}
                                        >
                                          <ForwardRef(IconButton)
                                            aria-haspopup="true"
                                            aria-label="Options"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit",
                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                "edgeStart": "MuiIconButton-edgeStart",
                                                "label": "MuiIconButton-label",
                                                "root": "MuiIconButton-root",
                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                              }
                                            }
                                            color="primary"
                                            onClick={[Function]}
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              aria-haspopup="true"
                                              aria-label="Options"
                                              centerRipple={true}
                                              className="MuiIconButton-root MuiIconButton-colorPrimary"
                                              disabled={false}
                                              focusRipple={true}
                                              onClick={[Function]}
                                            >
                                              <ForwardRef(ButtonBase)
                                                aria-haspopup="true"
                                                aria-label="Options"
                                                centerRipple={true}
                                                className="MuiIconButton-root MuiIconButton-colorPrimary"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                disabled={false}
                                                focusRipple={true}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  aria-haspopup="true"
                                                  aria-label="Options"
                                                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorPrimary"
                                                  disabled={false}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={0}
                                                  type="button"
                                                >
                                                  <span
                                                    className="MuiIconButton-label"
                                                  >
                                                    <ForwardRef>
                                                      <WithStyles(ForwardRef(SvgIcon))>
                                                        <ForwardRef(SvgIcon)
                                                          classes={
                                                            Object {
                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                              "colorError": "MuiSvgIcon-colorError",
                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                              "root": "MuiSvgIcon-root",
                                                            }
                                                          }
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="MuiSvgIcon-root"
                                                            focusable="false"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <path
                                                              d="M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z"
                                                            />
                                                          </svg>
                                                        </ForwardRef(SvgIcon)>
                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                    </ForwardRef>
                                                  </span>
                                                  <WithStyles(memo)
                                                    center={true}
                                                  >
                                                    <ForwardRef(TouchRipple)
                                                      center={true}
                                                      classes={
                                                        Object {
                                                          "child": "MuiTouchRipple-child",
                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                          "ripple": "MuiTouchRipple-ripple",
                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                          "root": "MuiTouchRipple-root",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="MuiTouchRipple-root"
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          component={null}
                                                          exit={true}
                                                        />
                                                      </span>
                                                    </ForwardRef(TouchRipple)>
                                                  </WithStyles(memo)>
                                                </button>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(IconButton)>
                                        </WithStyles(ForwardRef(IconButton))>
                                        <Menu
                                          anchorEl={null}
                                          onClose={[Function]}
                                          open={false}
                                          options={
                                            Array [
                                              Object {
                                                "disabled": undefined,
                                                "label": "Show Json",
                                                "onClick": [Function],
                                              },
                                            ]
                                          }
                                          style={
                                            Object {
                                              "maxHeight": 216,
                                              "width": 200,
                                            }
                                          }
                                        >
                                          <WithStyles(ForwardRef(Menu))
                                            PaperProps={
                                              Object {
                                                "style": Object {
                                                  "maxHeight": 216,
                                                  "width": 200,
                                                },
                                              }
                                            }
                                            anchorEl={null}
                                            id="options-menu"
                                            onClose={[Function]}
                                            open={false}
                                          >
                                            <ForwardRef(Menu)
                                              PaperProps={
                                                Object {
                                                  "style": Object {
                                                    "maxHeight": 216,
                                                    "width": 200,
                                                  },
                                                }
                                              }
                                              anchorEl={null}
                                              classes={
                                                Object {
                                                  "list": "MuiMenu-list",
                                                  "paper": "MuiMenu-paper",
                                                }
                                              }
                                              id="options-menu"
                                              onClose={[Function]}
                                              open={false}
                                            >
                                              <WithStyles(ForwardRef(Popover))
                                                PaperProps={
                                                  Object {
                                                    "classes": Object {
                                                      "root": "MuiMenu-paper",
                                                    },
                                                    "style": Object {
                                                      "maxHeight": 216,
                                                      "width": 200,
                                                    },
                                                  }
                                                }
                                                anchorEl={null}
                                                id="options-menu"
                                                onClose={[Function]}
                                                onEntering={[Function]}
                                                open={false}
                                                transitionDuration="auto"
                                              >
                                                <ForwardRef(Popover)
                                                  PaperProps={
                                                    Object {
                                                      "classes": Object {
                                                        "root": "MuiMenu-paper",
                                                      },
                                                      "style": Object {
                                                        "maxHeight": 216,
                                                        "width": 200,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={null}
                                                  classes={
                                                    Object {
                                                      "paper": "MuiPopover-paper",
                                                      "root": "MuiPopover-root",
                                                    }
                                                  }
                                                  id="options-menu"
                                                  onClose={[Function]}
                                                  onEntering={[Function]}
                                                  open={false}
                                                  transitionDuration="auto"
                                                >
                                                  <ForwardRef(Modal)
                                                    BackdropProps={
                                                      Object {
                                                        "invisible": true,
                                                      }
                                                    }
                                                    className="MuiPopover-root"
                                                    id="options-menu"
                                                    onClose={[Function]}
                                                    open={false}
                                                  />
                                                </ForwardRef(Popover)>
                                              </WithStyles(ForwardRef(Popover))>
                                            </ForwardRef(Menu)>
                                          </WithStyles(ForwardRef(Menu))>
                                        </Menu>
                                      </div>
                                    </Options>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-kgoBCf",
                                        "isStatic": false,
                                        "lastClassName": "ejpLAT",
                                        "rules": Array [
                                          "
    position: relative;
    top: 3px;
    left: -10px;
  ",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-kgoBCf",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-kgoBCf ejpLAT"
                                  >
                                    <WithStyles(ForwardRef(Tabs))
                                      aria-label="Tabs"
                                      indicatorColor="primary"
                                      onChange={[Function]}
                                      textColor="primary"
                                      value="basic"
                                    >
                                      <ForwardRef(Tabs)
                                        aria-label="Tabs"
                                        classes={
                                          Object {
                                            "centered": "MuiTabs-centered",
                                            "fixed": "MuiTabs-fixed",
                                            "flexContainer": "MuiTabs-flexContainer",
                                            "flexContainerVertical": "MuiTabs-flexContainerVertical",
                                            "indicator": "MuiTabs-indicator",
                                            "root": "MuiTabs-root",
                                            "scrollButtons": "MuiTabs-scrollButtons",
                                            "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                                            "scrollable": "MuiTabs-scrollable",
                                            "scroller": "MuiTabs-scroller",
                                            "vertical": "MuiTabs-vertical",
                                          }
                                        }
                                        indicatorColor="primary"
                                        onChange={[Function]}
                                        textColor="primary"
                                        value="basic"
                                      >
                                        <div
                                          className="MuiTabs-root"
                                        >
                                          <div
                                            className="MuiTabs-scroller MuiTabs-fixed"
                                            onScroll={[Function]}
                                            style={
                                              Object {
                                                "marginBottom": null,
                                                "overflow": "hidden",
                                              }
                                            }
                                          >
                                            <div
                                              aria-label="Tabs"
                                              className="MuiTabs-flexContainer"
                                              onKeyDown={[Function]}
                                              role="tablist"
                                            >
                                              <WithStyles(ForwardRef(Tab))
                                                fullWidth={false}
                                                indicator={false}
                                                key=".$basic"
                                                label="Basic"
                                                onChange={[Function]}
                                                selected={true}
                                                textColor="primary"
                                                value="basic"
                                              >
                                                <ForwardRef(Tab)
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "fullWidth": "MuiTab-fullWidth",
                                                      "labelIcon": "MuiTab-labelIcon",
                                                      "root": "MuiTab-root",
                                                      "selected": "Mui-selected",
                                                      "textColorInherit": "MuiTab-textColorInherit",
                                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                                      "wrapped": "MuiTab-wrapped",
                                                      "wrapper": "MuiTab-wrapper",
                                                    }
                                                  }
                                                  fullWidth={false}
                                                  indicator={false}
                                                  label="Basic"
                                                  onChange={[Function]}
                                                  selected={true}
                                                  textColor="primary"
                                                  value="basic"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-selected={true}
                                                    className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    role="tab"
                                                    tabIndex={0}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-selected={true}
                                                      className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      role="tab"
                                                      tabIndex={0}
                                                    >
                                                      <button
                                                        aria-selected={true}
                                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        role="tab"
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiTab-wrapper"
                                                        >
                                                          Basic
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Tab)>
                                              </WithStyles(ForwardRef(Tab))>
                                              <WithStyles(ForwardRef(Tab))
                                                fullWidth={false}
                                                indicator={false}
                                                key=".$validations"
                                                label="Validations"
                                                onChange={[Function]}
                                                selected={false}
                                                textColor="primary"
                                                value="validations"
                                              >
                                                <ForwardRef(Tab)
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "fullWidth": "MuiTab-fullWidth",
                                                      "labelIcon": "MuiTab-labelIcon",
                                                      "root": "MuiTab-root",
                                                      "selected": "Mui-selected",
                                                      "textColorInherit": "MuiTab-textColorInherit",
                                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                                      "wrapped": "MuiTab-wrapped",
                                                      "wrapper": "MuiTab-wrapper",
                                                    }
                                                  }
                                                  fullWidth={false}
                                                  indicator={false}
                                                  label="Validations"
                                                  onChange={[Function]}
                                                  selected={false}
                                                  textColor="primary"
                                                  value="validations"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-selected={false}
                                                    className="MuiTab-root MuiTab-textColorPrimary"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    role="tab"
                                                    tabIndex={-1}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-selected={false}
                                                      className="MuiTab-root MuiTab-textColorPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      role="tab"
                                                      tabIndex={-1}
                                                    >
                                                      <button
                                                        aria-selected={false}
                                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        role="tab"
                                                        tabIndex={-1}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiTab-wrapper"
                                                        >
                                                          Validations
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Tab)>
                                              </WithStyles(ForwardRef(Tab))>
                                              <WithStyles(ForwardRef(Tab))
                                                fullWidth={false}
                                                indicator={false}
                                                key=".$terms"
                                                label="Terms"
                                                onChange={[Function]}
                                                selected={false}
                                                textColor="primary"
                                                value="terms"
                                              >
                                                <ForwardRef(Tab)
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "fullWidth": "MuiTab-fullWidth",
                                                      "labelIcon": "MuiTab-labelIcon",
                                                      "root": "MuiTab-root",
                                                      "selected": "Mui-selected",
                                                      "textColorInherit": "MuiTab-textColorInherit",
                                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                                      "wrapped": "MuiTab-wrapped",
                                                      "wrapper": "MuiTab-wrapper",
                                                    }
                                                  }
                                                  fullWidth={false}
                                                  indicator={false}
                                                  label="Terms"
                                                  onChange={[Function]}
                                                  selected={false}
                                                  textColor="primary"
                                                  value="terms"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-selected={false}
                                                    className="MuiTab-root MuiTab-textColorPrimary"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    role="tab"
                                                    tabIndex={-1}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-selected={false}
                                                      className="MuiTab-root MuiTab-textColorPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      role="tab"
                                                      tabIndex={-1}
                                                    >
                                                      <button
                                                        aria-selected={false}
                                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        role="tab"
                                                        tabIndex={-1}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiTab-wrapper"
                                                        >
                                                          Terms
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Tab)>
                                              </WithStyles(ForwardRef(Tab))>
                                              <WithStyles(ForwardRef(Tab))
                                                fullWidth={false}
                                                indicator={false}
                                                key=".$ui"
                                                label="UI"
                                                onChange={[Function]}
                                                selected={false}
                                                textColor="primary"
                                                value="ui"
                                              >
                                                <ForwardRef(Tab)
                                                  classes={
                                                    Object {
                                                      "disabled": "Mui-disabled",
                                                      "fullWidth": "MuiTab-fullWidth",
                                                      "labelIcon": "MuiTab-labelIcon",
                                                      "root": "MuiTab-root",
                                                      "selected": "Mui-selected",
                                                      "textColorInherit": "MuiTab-textColorInherit",
                                                      "textColorPrimary": "MuiTab-textColorPrimary",
                                                      "textColorSecondary": "MuiTab-textColorSecondary",
                                                      "wrapped": "MuiTab-wrapped",
                                                      "wrapper": "MuiTab-wrapper",
                                                    }
                                                  }
                                                  fullWidth={false}
                                                  indicator={false}
                                                  label="UI"
                                                  onChange={[Function]}
                                                  selected={false}
                                                  textColor="primary"
                                                  value="ui"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-selected={false}
                                                    className="MuiTab-root MuiTab-textColorPrimary"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    role="tab"
                                                    tabIndex={-1}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-selected={false}
                                                      className="MuiTab-root MuiTab-textColorPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      role="tab"
                                                      tabIndex={-1}
                                                    >
                                                      <button
                                                        aria-selected={false}
                                                        className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        role="tab"
                                                        tabIndex={-1}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiTab-wrapper"
                                                        >
                                                          UI
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Tab)>
                                              </WithStyles(ForwardRef(Tab))>
                                            </div>
                                            <WithStyles(ForwardRef(TabIndicator))
                                              className="MuiTabs-indicator"
                                              color="primary"
                                              orientation="horizontal"
                                              style={
                                                Object {
                                                  "left": 0,
                                                  "width": 0,
                                                }
                                              }
                                            >
                                              <ForwardRef(TabIndicator)
                                                className="MuiTabs-indicator"
                                                classes={
                                                  Object {
                                                    "colorPrimary": "PrivateTabIndicator-colorPrimary-2",
                                                    "colorSecondary": "PrivateTabIndicator-colorSecondary-3",
                                                    "root": "PrivateTabIndicator-root-1",
                                                    "vertical": "PrivateTabIndicator-vertical-4",
                                                  }
                                                }
                                                color="primary"
                                                orientation="horizontal"
                                                style={
                                                  Object {
                                                    "left": 0,
                                                    "width": 0,
                                                  }
                                                }
                                              >
                                                <span
                                                  className="PrivateTabIndicator-root-1 PrivateTabIndicator-colorPrimary-2 MuiTabs-indicator"
                                                  style={
                                                    Object {
                                                      "left": 0,
                                                      "width": 0,
                                                    }
                                                  }
                                                />
                                              </ForwardRef(TabIndicator)>
                                            </WithStyles(ForwardRef(TabIndicator))>
                                          </div>
                                        </div>
                                      </ForwardRef(Tabs)>
                                    </WithStyles(ForwardRef(Tabs))>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div
                          aria-label="Sections"
                        >
                          <StyledComponent
                            aria-label="Sections"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-kGXeez",
                                  "isStatic": false,
                                  "lastClassName": "eRBpYu",
                                  "rules": Array [
                                    "
    flex-grow: 1;
    overflow-y: auto;
  ",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-kGXeez",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={
                              Object {
                                "current": <div
                                  aria-label="Sections"
                                  class="sc-kGXeez eRBpYu"
                                >
                                  <div
                                    class="sc-dnqmqq psgzJ"
                                    id="basic"
                                  >
                                    <h3
                                      class="sc-iwsKbI gaRpVe"
                                    >
                                      Basic
                                    </h3>
                                    <div
                                      class="sc-gzVnrw jKdxIN"
                                    >
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                    </div>
                                  </div>
                                  <div
                                    class="sc-dnqmqq psgzJ"
                                    id="validations"
                                  >
                                    <h3
                                      class="sc-iwsKbI gaRpVe"
                                    >
                                      Validations
                                    </h3>
                                    <div
                                      class="sc-gzVnrw jKdxIN"
                                    >
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                    </div>
                                  </div>
                                  <div
                                    class="sc-dnqmqq psgzJ"
                                    id="terms"
                                  >
                                    <h3
                                      class="sc-iwsKbI gaRpVe"
                                    >
                                      Terms
                                    </h3>
                                    <div
                                      class="sc-gzVnrw jKdxIN"
                                    >
                                      <div
                                        class="sc-bZQynM bwibdY"
                                        width="100%"
                                      />
                                    </div>
                                  </div>
                                  <div
                                    class="sc-dnqmqq psgzJ"
                                    id="ui"
                                  >
                                    <h3
                                      class="sc-iwsKbI gaRpVe"
                                    >
                                      UI
                                    </h3>
                                    <div
                                      class="sc-gzVnrw jKdxIN"
                                    >
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                      <div
                                        class="sc-bZQynM clIlZD"
                                        width="400px"
                                      />
                                    </div>
                                  </div>
                                </div>,
                              }
                            }
                          >
                            <div
                              aria-label="Sections"
                              className="sc-kGXeez eRBpYu"
                            >
                              <ForwardRef
                                boxes={
                                  Array [
                                    Object {
                                      "boxes": Array [
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "id",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "path",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "dependencies",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "dependenciesChange",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                      ],
                                      "direction": "row",
                                    },
                                  ]
                                }
                                id="basic"
                                key="basic"
                                title="Basic"
                              >
                                <Section
                                  boxes={
                                    Array [
                                      Object {
                                        "boxes": Array [
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "id",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "path",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "dependencies",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "dependenciesChange",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                        ],
                                        "direction": "row",
                                      },
                                    ]
                                  }
                                  id="basic"
                                  innerRef={
                                    Object {
                                      "current": <div
                                        class="sc-dnqmqq psgzJ"
                                        id="basic"
                                      >
                                        <h3
                                          class="sc-iwsKbI gaRpVe"
                                        >
                                          Basic
                                        </h3>
                                        <div
                                          class="sc-gzVnrw jKdxIN"
                                        >
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                        </div>
                                      </div>,
                                    }
                                  }
                                  level={1}
                                  title="Basic"
                                >
                                  <styled.div
                                    id="basic"
                                    level={1}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "psgzJ",
                                            "rules": Array [
                                              "
  padding: ",
                                              [Function],
                                              ";
  border-bottom: ",
                                              [Function],
                                              ";
  &:last-child {
    border-bottom: none;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={
                                        Object {
                                          "current": <div
                                            class="sc-dnqmqq psgzJ"
                                            id="basic"
                                          >
                                            <h3
                                              class="sc-iwsKbI gaRpVe"
                                            >
                                              Basic
                                            </h3>
                                            <div
                                              class="sc-gzVnrw jKdxIN"
                                            >
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                            </div>
                                          </div>,
                                        }
                                      }
                                      id="basic"
                                      level={1}
                                    >
                                      <div
                                        className="sc-dnqmqq psgzJ"
                                        id="basic"
                                      >
                                        <styled.h3
                                          level={1}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "gaRpVe",
                                                  "rules": Array [
                                                    "
  text-transform: uppercase;
  line-height: 1.1;
  color: inherit;
  font-size: ",
                                                    [Function],
                                                    ";
  font-weight: ",
                                                    [Function],
                                                    ";
  padding: ",
                                                    [Function],
                                                    ";
  margin: 0;
",
                                                  ],
                                                },
                                                "displayName": "styled.h3",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "h3",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            level={1}
                                          >
                                            <h3
                                              className="sc-iwsKbI gaRpVe"
                                            >
                                              Basic
                                            </h3>
                                          </StyledComponent>
                                        </styled.h3>
                                        <Box
                                          boxes={
                                            Array [
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "id",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "path",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "dependencies",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "dependenciesChange",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                            ]
                                          }
                                          direction="row"
                                          key="0"
                                          props={Object {}}
                                          style={Object {}}
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-gzVnrw",
                                                    "isStatic": false,
                                                    "lastClassName": "jKdxIN",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-gzVnrw",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gzVnrw jKdxIN"
                                              >
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "id",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "path",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="0"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "id",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="id"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="id"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="1"
                                                          props={
                                                            Object {
                                                              "id": "path",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="path"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="path"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "dependencies",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "dependenciesChange",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="1"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "dependencies",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="dependencies"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="dependencies"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="1"
                                                          props={
                                                            Object {
                                                              "id": "dependenciesChange",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="dependenciesChange"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="dependenciesChange"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                        </Box>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Section>
                              </ForwardRef>
                              <ForwardRef
                                boxes={
                                  Array [
                                    Object {
                                      "boxes": Array [
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "required",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "validators",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                      ],
                                      "direction": "row",
                                    },
                                  ]
                                }
                                id="validations"
                                key="validations"
                                title="Validations"
                              >
                                <Section
                                  boxes={
                                    Array [
                                      Object {
                                        "boxes": Array [
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "required",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "validators",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                        ],
                                        "direction": "row",
                                      },
                                    ]
                                  }
                                  id="validations"
                                  innerRef={
                                    Object {
                                      "current": <div
                                        class="sc-dnqmqq psgzJ"
                                        id="validations"
                                      >
                                        <h3
                                          class="sc-iwsKbI gaRpVe"
                                        >
                                          Validations
                                        </h3>
                                        <div
                                          class="sc-gzVnrw jKdxIN"
                                        >
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                        </div>
                                      </div>,
                                    }
                                  }
                                  level={1}
                                  title="Validations"
                                >
                                  <styled.div
                                    id="validations"
                                    level={1}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "psgzJ",
                                            "rules": Array [
                                              "
  padding: ",
                                              [Function],
                                              ";
  border-bottom: ",
                                              [Function],
                                              ";
  &:last-child {
    border-bottom: none;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={
                                        Object {
                                          "current": <div
                                            class="sc-dnqmqq psgzJ"
                                            id="validations"
                                          >
                                            <h3
                                              class="sc-iwsKbI gaRpVe"
                                            >
                                              Validations
                                            </h3>
                                            <div
                                              class="sc-gzVnrw jKdxIN"
                                            >
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                            </div>
                                          </div>,
                                        }
                                      }
                                      id="validations"
                                      level={1}
                                    >
                                      <div
                                        className="sc-dnqmqq psgzJ"
                                        id="validations"
                                      >
                                        <styled.h3
                                          level={1}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "gaRpVe",
                                                  "rules": Array [
                                                    "
  text-transform: uppercase;
  line-height: 1.1;
  color: inherit;
  font-size: ",
                                                    [Function],
                                                    ";
  font-weight: ",
                                                    [Function],
                                                    ";
  padding: ",
                                                    [Function],
                                                    ";
  margin: 0;
",
                                                  ],
                                                },
                                                "displayName": "styled.h3",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "h3",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            level={1}
                                          >
                                            <h3
                                              className="sc-iwsKbI gaRpVe"
                                            >
                                              Validations
                                            </h3>
                                          </StyledComponent>
                                        </styled.h3>
                                        <Box
                                          boxes={
                                            Array [
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "required",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "validators",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                            ]
                                          }
                                          direction="row"
                                          key="0"
                                          props={Object {}}
                                          style={Object {}}
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-gzVnrw",
                                                    "isStatic": false,
                                                    "lastClassName": "jKdxIN",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-gzVnrw",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gzVnrw jKdxIN"
                                              >
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "required",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="0"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "required",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="required"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="required"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "validators",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="1"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "validators",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="validators"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="validators"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                        </Box>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Section>
                              </ForwardRef>
                              <ForwardRef
                                boxes={
                                  Array [
                                    Object {
                                      "boxes": Array [
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "disableTerm",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "excludeTerm",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "requireTerm",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "100%",
                                            "width": "100%",
                                          },
                                        },
                                      ],
                                      "direction": "row",
                                    },
                                  ]
                                }
                                id="terms"
                                key="terms"
                                title="Terms"
                              >
                                <Section
                                  boxes={
                                    Array [
                                      Object {
                                        "boxes": Array [
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "disableTerm",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "excludeTerm",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "requireTerm",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "100%",
                                              "width": "100%",
                                            },
                                          },
                                        ],
                                        "direction": "row",
                                      },
                                    ]
                                  }
                                  id="terms"
                                  innerRef={
                                    Object {
                                      "current": <div
                                        class="sc-dnqmqq psgzJ"
                                        id="terms"
                                      >
                                        <h3
                                          class="sc-iwsKbI gaRpVe"
                                        >
                                          Terms
                                        </h3>
                                        <div
                                          class="sc-gzVnrw jKdxIN"
                                        >
                                          <div
                                            class="sc-bZQynM bwibdY"
                                            width="100%"
                                          />
                                        </div>
                                      </div>,
                                    }
                                  }
                                  level={1}
                                  title="Terms"
                                >
                                  <styled.div
                                    id="terms"
                                    level={1}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "psgzJ",
                                            "rules": Array [
                                              "
  padding: ",
                                              [Function],
                                              ";
  border-bottom: ",
                                              [Function],
                                              ";
  &:last-child {
    border-bottom: none;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={
                                        Object {
                                          "current": <div
                                            class="sc-dnqmqq psgzJ"
                                            id="terms"
                                          >
                                            <h3
                                              class="sc-iwsKbI gaRpVe"
                                            >
                                              Terms
                                            </h3>
                                            <div
                                              class="sc-gzVnrw jKdxIN"
                                            >
                                              <div
                                                class="sc-bZQynM bwibdY"
                                                width="100%"
                                              />
                                            </div>
                                          </div>,
                                        }
                                      }
                                      id="terms"
                                      level={1}
                                    >
                                      <div
                                        className="sc-dnqmqq psgzJ"
                                        id="terms"
                                      >
                                        <styled.h3
                                          level={1}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "gaRpVe",
                                                  "rules": Array [
                                                    "
  text-transform: uppercase;
  line-height: 1.1;
  color: inherit;
  font-size: ",
                                                    [Function],
                                                    ";
  font-weight: ",
                                                    [Function],
                                                    ";
  padding: ",
                                                    [Function],
                                                    ";
  margin: 0;
",
                                                  ],
                                                },
                                                "displayName": "styled.h3",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "h3",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            level={1}
                                          >
                                            <h3
                                              className="sc-iwsKbI gaRpVe"
                                            >
                                              Terms
                                            </h3>
                                          </StyledComponent>
                                        </styled.h3>
                                        <Box
                                          boxes={
                                            Array [
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "disableTerm",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "excludeTerm",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "requireTerm",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "100%",
                                                  "width": "100%",
                                                },
                                              },
                                            ]
                                          }
                                          direction="row"
                                          key="0"
                                          props={Object {}}
                                          style={Object {}}
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-gzVnrw",
                                                    "isStatic": false,
                                                    "lastClassName": "jKdxIN",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-gzVnrw",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gzVnrw jKdxIN"
                                              >
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "disableTerm",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "excludeTerm",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "requireTerm",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="0"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "100%",
                                                      "width": "100%",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="100%"
                                                    width="100%"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="100%"
                                                      width="100%"
                                                    >
                                                      <div
                                                        className="sc-bZQynM bwibdY"
                                                        width="100%"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "disableTerm",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="disableTerm"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="disableTerm"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="1"
                                                          props={
                                                            Object {
                                                              "id": "excludeTerm",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="excludeTerm"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="excludeTerm"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="2"
                                                          props={
                                                            Object {
                                                              "id": "requireTerm",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="requireTerm"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="requireTerm"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                        </Box>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Section>
                              </ForwardRef>
                              <ForwardRef
                                boxes={
                                  Array [
                                    Object {
                                      "boxes": Array [
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "label",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "component",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                        Object {
                                          "boxes": Array [
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "description",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "formatter",
                                              },
                                            },
                                            Object {
                                              "component": [Function],
                                              "props": Object {
                                                "id": "parser",
                                              },
                                            },
                                          ],
                                          "direction": "column",
                                          "style": Object {
                                            "margin": "0 30px 0 0",
                                            "maxWidth": "400px",
                                            "width": "400px",
                                          },
                                        },
                                      ],
                                      "direction": "row",
                                    },
                                  ]
                                }
                                id="ui"
                                key="ui"
                                title="UI"
                              >
                                <Section
                                  boxes={
                                    Array [
                                      Object {
                                        "boxes": Array [
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "label",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "component",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                          Object {
                                            "boxes": Array [
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "description",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "formatter",
                                                },
                                              },
                                              Object {
                                                "component": [Function],
                                                "props": Object {
                                                  "id": "parser",
                                                },
                                              },
                                            ],
                                            "direction": "column",
                                            "style": Object {
                                              "margin": "0 30px 0 0",
                                              "maxWidth": "400px",
                                              "width": "400px",
                                            },
                                          },
                                        ],
                                        "direction": "row",
                                      },
                                    ]
                                  }
                                  id="ui"
                                  innerRef={
                                    Object {
                                      "current": <div
                                        class="sc-dnqmqq psgzJ"
                                        id="ui"
                                      >
                                        <h3
                                          class="sc-iwsKbI gaRpVe"
                                        >
                                          UI
                                        </h3>
                                        <div
                                          class="sc-gzVnrw jKdxIN"
                                        >
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                          <div
                                            class="sc-bZQynM clIlZD"
                                            width="400px"
                                          />
                                        </div>
                                      </div>,
                                    }
                                  }
                                  level={1}
                                  title="UI"
                                >
                                  <styled.div
                                    id="ui"
                                    level={1}
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "psgzJ",
                                            "rules": Array [
                                              "
  padding: ",
                                              [Function],
                                              ";
  border-bottom: ",
                                              [Function],
                                              ";
  &:last-child {
    border-bottom: none;
  }
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={
                                        Object {
                                          "current": <div
                                            class="sc-dnqmqq psgzJ"
                                            id="ui"
                                          >
                                            <h3
                                              class="sc-iwsKbI gaRpVe"
                                            >
                                              UI
                                            </h3>
                                            <div
                                              class="sc-gzVnrw jKdxIN"
                                            >
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                              <div
                                                class="sc-bZQynM clIlZD"
                                                width="400px"
                                              />
                                            </div>
                                          </div>,
                                        }
                                      }
                                      id="ui"
                                      level={1}
                                    >
                                      <div
                                        className="sc-dnqmqq psgzJ"
                                        id="ui"
                                      >
                                        <styled.h3
                                          level={1}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-iwsKbI",
                                                  "isStatic": false,
                                                  "lastClassName": "gaRpVe",
                                                  "rules": Array [
                                                    "
  text-transform: uppercase;
  line-height: 1.1;
  color: inherit;
  font-size: ",
                                                    [Function],
                                                    ";
  font-weight: ",
                                                    [Function],
                                                    ";
  padding: ",
                                                    [Function],
                                                    ";
  margin: 0;
",
                                                  ],
                                                },
                                                "displayName": "styled.h3",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-iwsKbI",
                                                "target": "h3",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            level={1}
                                          >
                                            <h3
                                              className="sc-iwsKbI gaRpVe"
                                            >
                                              UI
                                            </h3>
                                          </StyledComponent>
                                        </styled.h3>
                                        <Box
                                          boxes={
                                            Array [
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "label",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "component",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                              Object {
                                                "boxes": Array [
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "description",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "formatter",
                                                    },
                                                  },
                                                  Object {
                                                    "component": [Function],
                                                    "props": Object {
                                                      "id": "parser",
                                                    },
                                                  },
                                                ],
                                                "direction": "column",
                                                "style": Object {
                                                  "margin": "0 30px 0 0",
                                                  "maxWidth": "400px",
                                                  "width": "400px",
                                                },
                                              },
                                            ]
                                          }
                                          direction="row"
                                          key="0"
                                          props={Object {}}
                                          style={Object {}}
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-gzVnrw",
                                                    "isStatic": false,
                                                    "lastClassName": "jKdxIN",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-gzVnrw",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gzVnrw jKdxIN"
                                              >
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "label",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "component",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="0"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "label",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="label"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="label"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="1"
                                                          props={
                                                            Object {
                                                              "id": "component",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="component"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="component"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                                <Box
                                                  boxes={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "description",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "formatter",
                                                        },
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "props": Object {
                                                          "id": "parser",
                                                        },
                                                      },
                                                    ]
                                                  }
                                                  direction="column"
                                                  key="1"
                                                  props={Object {}}
                                                  style={
                                                    Object {
                                                      "margin": "0 30px 0 0",
                                                      "maxWidth": "400px",
                                                      "width": "400px",
                                                    }
                                                  }
                                                >
                                                  <styled.div
                                                    margin="0 30px 0 0"
                                                    maxWidth="400px"
                                                    width="400px"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bZQynM",
                                                            "isStatic": false,
                                                            "lastClassName": "clIlZD",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: column;
  width: ",
                                                              [Function],
                                                              ";
  max-width: ",
                                                              [Function],
                                                              ";
  margin: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bZQynM",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      margin="0 30px 0 0"
                                                      maxWidth="400px"
                                                      width="400px"
                                                    >
                                                      <div
                                                        className="sc-bZQynM clIlZD"
                                                        width="400px"
                                                      >
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="0"
                                                          props={
                                                            Object {
                                                              "id": "description",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="description"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="description"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="1"
                                                          props={
                                                            Object {
                                                              "id": "formatter",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="formatter"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="formatter"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                        <Box
                                                          boxes={Array []}
                                                          component={[Function]}
                                                          direction="column"
                                                          key="2"
                                                          props={
                                                            Object {
                                                              "id": "parser",
                                                            }
                                                          }
                                                          style={Object {}}
                                                        >
                                                          <Field
                                                            id="parser"
                                                          >
                                                            <FieldView
                                                              description=""
                                                              dirty={false}
                                                              disabled={false}
                                                              empty={false}
                                                              errors={Array []}
                                                              excluded={true}
                                                              id="parser"
                                                              invalid={false}
                                                              label=""
                                                              onStateChange={[Function]}
                                                              onValueChange={[Function]}
                                                              required={false}
                                                              state={Object {}}
                                                            />
                                                          </Field>
                                                        </Box>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Box>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                        </Box>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </Section>
                              </ForwardRef>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <Footer
                          actions={
                            Array [
                              Object {
                                "disabled": undefined,
                                "label": "Cancel",
                                "onClick": [Function],
                                "type": "tertiary",
                              },
                              Object {
                                "disable": [Function],
                                "disabled": false,
                                "elementRef": Object {
                                  "current": <button
                                    button-type="primary"
                                    class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                    tabindex="0"
                                    type="button"
                                  >
                                    <span
                                      class="MuiButton-label"
                                    >
                                      Save
                                    </span>
                                    <span
                                      class="MuiTouchRipple-root"
                                    />
                                  </button>,
                                },
                                "label": "Save",
                                "onClick": [Function],
                                "popover": Object {
                                  "component": [Function],
                                  "open": [Function],
                                  "props": Object {
                                    "onClickField": [Function],
                                  },
                                  "targetRef": Object {
                                    "current": <button
                                      button-type="primary"
                                      class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                      tabindex="0"
                                      type="button"
                                    >
                                      <span
                                        class="MuiButton-label"
                                      >
                                        Save
                                      </span>
                                      <span
                                        class="MuiTouchRipple-root"
                                      />
                                    </button>,
                                  },
                                  "title": "Handle Fields",
                                },
                                "type": "primary",
                              },
                            ]
                          }
                          aria-label="Footer"
                        >
                          <styled.div
                            actions={
                              Array [
                                Object {
                                  "disabled": undefined,
                                  "label": "Cancel",
                                  "onClick": [Function],
                                  "type": "tertiary",
                                },
                                Object {
                                  "disable": [Function],
                                  "disabled": false,
                                  "elementRef": Object {
                                    "current": <button
                                      button-type="primary"
                                      class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                      tabindex="0"
                                      type="button"
                                    >
                                      <span
                                        class="MuiButton-label"
                                      >
                                        Save
                                      </span>
                                      <span
                                        class="MuiTouchRipple-root"
                                      />
                                    </button>,
                                  },
                                  "label": "Save",
                                  "onClick": [Function],
                                  "popover": Object {
                                    "component": [Function],
                                    "open": [Function],
                                    "props": Object {
                                      "onClickField": [Function],
                                    },
                                    "targetRef": Object {
                                      "current": <button
                                        button-type="primary"
                                        class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                        tabindex="0"
                                        type="button"
                                      >
                                        <span
                                          class="MuiButton-label"
                                        >
                                          Save
                                        </span>
                                        <span
                                          class="MuiTouchRipple-root"
                                        />
                                      </button>,
                                    },
                                    "title": "Handle Fields",
                                  },
                                  "type": "primary",
                                },
                              ]
                            }
                            aria-label="Footer"
                          >
                            <StyledComponent
                              actions={
                                Array [
                                  Object {
                                    "disabled": undefined,
                                    "label": "Cancel",
                                    "onClick": [Function],
                                    "type": "tertiary",
                                  },
                                  Object {
                                    "disable": [Function],
                                    "disabled": false,
                                    "elementRef": Object {
                                      "current": <button
                                        button-type="primary"
                                        class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                        tabindex="0"
                                        type="button"
                                      >
                                        <span
                                          class="MuiButton-label"
                                        >
                                          Save
                                        </span>
                                        <span
                                          class="MuiTouchRipple-root"
                                        />
                                      </button>,
                                    },
                                    "label": "Save",
                                    "onClick": [Function],
                                    "popover": Object {
                                      "component": [Function],
                                      "open": [Function],
                                      "props": Object {
                                        "onClickField": [Function],
                                      },
                                      "targetRef": Object {
                                        "current": <button
                                          button-type="primary"
                                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                          tabindex="0"
                                          type="button"
                                        >
                                          <span
                                            class="MuiButton-label"
                                          >
                                            Save
                                          </span>
                                          <span
                                            class="MuiTouchRipple-root"
                                          />
                                        </button>,
                                      },
                                      "title": "Handle Fields",
                                    },
                                    "type": "primary",
                                  },
                                ]
                              }
                              aria-label="Footer"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-VigVT",
                                    "isStatic": false,
                                    "lastClassName": "nVjsR",
                                    "rules": Array [
                                      "
  flex: 0 0 auto;
  display: flex;
  direction: row;
  background: hsla(0,0%,99%,.9);
  opacity: 1;
  padding: 22px;
  box-shadow: 0 -3px 3px 0 hsla(0,0%,75%,.5);
  z-index: 20;
  pointer-events: auto;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-VigVT",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                aria-label="Footer"
                                className="sc-VigVT nVjsR"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jTzLTM",
                                          "isStatic": false,
                                          "lastClassName": "hHoAvA",
                                          "rules": Array [
                                            "
  display: flex;
  direction: row;
  flex-grow: 1;
  justify-content: flex-end;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jTzLTM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-jTzLTM hHoAvA"
                                    >
                                      <styled.div
                                        key="Cancel"
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-fjdhpX",
                                                "isStatic": false,
                                                "lastClassName": "kdZlVV",
                                                "rules": Array [
                                                  "
  margin-left: 15px;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-fjdhpX",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-fjdhpX kdZlVV"
                                          >
                                            <Button
                                              label="Cancel"
                                              onClick={[Function]}
                                              type="tertiary"
                                            >
                                              <WithStyles(ForwardRef(Button))
                                                button-type="tertiary"
                                                color="primary"
                                                onClick={[Function]}
                                              >
                                                <ForwardRef(Button)
                                                  button-type="tertiary"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiButton-colorInherit",
                                                      "contained": "MuiButton-contained",
                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                      "disableElevation": "MuiButton-disableElevation",
                                                      "disabled": "Mui-disabled",
                                                      "endIcon": "MuiButton-endIcon",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "fullWidth": "MuiButton-fullWidth",
                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                      "label": "MuiButton-label",
                                                      "outlined": "MuiButton-outlined",
                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                      "root": "MuiButton-root",
                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                      "startIcon": "MuiButton-startIcon",
                                                      "text": "MuiButton-text",
                                                      "textPrimary": "MuiButton-textPrimary",
                                                      "textSecondary": "MuiButton-textSecondary",
                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                    }
                                                  }
                                                  color="primary"
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    button-type="tertiary"
                                                    className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                    component="button"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible"
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      button-type="tertiary"
                                                      className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      component="button"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      focusVisibleClassName="Mui-focusVisible"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <button
                                                        button-type="tertiary"
                                                        className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiButton-label"
                                                        >
                                                          Cancel
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Button)>
                                              </WithStyles(ForwardRef(Button))>
                                            </Button>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.div
                                        key="Save"
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-fjdhpX",
                                                "isStatic": false,
                                                "lastClassName": "kdZlVV",
                                                "rules": Array [
                                                  "
  margin-left: 15px;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-fjdhpX",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-fjdhpX kdZlVV"
                                          >
                                            <Button
                                              disable={[Function]}
                                              disabled={false}
                                              elementRef={
                                                Object {
                                                  "current": <button
                                                    button-type="primary"
                                                    class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                    tabindex="0"
                                                    type="button"
                                                  >
                                                    <span
                                                      class="MuiButton-label"
                                                    >
                                                      Save
                                                    </span>
                                                    <span
                                                      class="MuiTouchRipple-root"
                                                    />
                                                  </button>,
                                                }
                                              }
                                              label="Save"
                                              onClick={[Function]}
                                              popover={
                                                Object {
                                                  "component": [Function],
                                                  "open": [Function],
                                                  "props": Object {
                                                    "onClickField": [Function],
                                                  },
                                                  "targetRef": Object {
                                                    "current": <button
                                                      button-type="primary"
                                                      class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                      tabindex="0"
                                                      type="button"
                                                    >
                                                      <span
                                                        class="MuiButton-label"
                                                      >
                                                        Save
                                                      </span>
                                                      <span
                                                        class="MuiTouchRipple-root"
                                                      />
                                                    </button>,
                                                  },
                                                  "title": "Handle Fields",
                                                }
                                              }
                                              type="primary"
                                            >
                                              <WithStyles(ForwardRef(Button))
                                                button-type="primary"
                                                color="primary"
                                                disabled={false}
                                                onClick={[Function]}
                                                variant="contained"
                                              >
                                                <ForwardRef(Button)
                                                  button-type="primary"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiButton-colorInherit",
                                                      "contained": "MuiButton-contained",
                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                      "disableElevation": "MuiButton-disableElevation",
                                                      "disabled": "Mui-disabled",
                                                      "endIcon": "MuiButton-endIcon",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "fullWidth": "MuiButton-fullWidth",
                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                      "label": "MuiButton-label",
                                                      "outlined": "MuiButton-outlined",
                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                      "root": "MuiButton-root",
                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                      "startIcon": "MuiButton-startIcon",
                                                      "text": "MuiButton-text",
                                                      "textPrimary": "MuiButton-textPrimary",
                                                      "textSecondary": "MuiButton-textSecondary",
                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                    }
                                                  }
                                                  color="primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  variant="contained"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    button-type="primary"
                                                    className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                    component="button"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible"
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      button-type="primary"
                                                      className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      component="button"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      focusVisibleClassName="Mui-focusVisible"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <button
                                                        button-type="primary"
                                                        className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiButton-label"
                                                        >
                                                          Save
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={false}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={false}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Button)>
                                              </WithStyles(ForwardRef(Button))>
                                            </Button>
                                            <Popover
                                              component={[Function]}
                                              open={[Function]}
                                              props={
                                                Object {
                                                  "onClickField": [Function],
                                                }
                                              }
                                              targetRef={
                                                Object {
                                                  "current": <button
                                                    button-type="primary"
                                                    class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                    tabindex="0"
                                                    type="button"
                                                  >
                                                    <span
                                                      class="MuiButton-label"
                                                    >
                                                      Save
                                                    </span>
                                                    <span
                                                      class="MuiTouchRipple-root"
                                                    />
                                                  </button>,
                                                }
                                              }
                                              title="Handle Fields"
                                            />
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Footer>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </ItemView>
              </Item>
            </div>
          </StyledComponent>
        </styled.div>
      </BaseItem>
    </Form>
  </FieldEditor>
</ThemeProvider>
`;
