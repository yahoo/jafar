// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormEditor Should render component when props are defined - ok 1`] = `
<ThemeProvider
  theme={
    Object {
      "breakpoints": Object {
        "between": [Function],
        "down": [Function],
        "keys": Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ],
        "only": [Function],
        "up": [Function],
        "values": Object {
          "lg": 1280,
          "md": 960,
          "sm": 600,
          "xl": 1920,
          "xs": 0,
        },
        "width": [Function],
      },
      "direction": "ltr",
      "mixins": Object {
        "gutters": [Function],
        "toolbar": Object {
          "@media (min-width:0px) and (orientation: landscape)": Object {
            "minHeight": 48,
          },
          "@media (min-width:600px)": Object {
            "minHeight": 64,
          },
          "minHeight": 56,
        },
      },
      "overrides": Object {},
      "palette": Object {
        "action": Object {
          "activatedOpacity": 0.12,
          "active": "rgba(0, 0, 0, 0.54)",
          "disabled": "rgba(0, 0, 0, 0.26)",
          "disabledBackground": "rgba(0, 0, 0, 0.12)",
          "disabledOpacity": 0.38,
          "focus": "rgba(0, 0, 0, 0.12)",
          "focusOpacity": 0.12,
          "hover": "rgba(0, 0, 0, 0.04)",
          "hoverOpacity": 0.04,
          "selected": "rgba(0, 0, 0, 0.08)",
          "selectedOpacity": 0.08,
        },
        "augmentColor": [Function],
        "background": Object {
          "default": "#fafafa",
          "paper": "#fff",
        },
        "common": Object {
          "black": "#000",
          "white": "#fff",
        },
        "contrastThreshold": 3,
        "divider": "rgba(0, 0, 0, 0.12)",
        "error": Object {
          "contrastText": "#fff",
          "dark": "#d32f2f",
          "light": "#e57373",
          "main": "#f44336",
        },
        "getContrastText": [Function],
        "grey": Object {
          "100": "#f5f5f5",
          "200": "#eeeeee",
          "300": "#e0e0e0",
          "400": "#bdbdbd",
          "50": "#fafafa",
          "500": "#9e9e9e",
          "600": "#757575",
          "700": "#616161",
          "800": "#424242",
          "900": "#212121",
          "A100": "#d5d5d5",
          "A200": "#aaaaaa",
          "A400": "#303030",
          "A700": "#616161",
        },
        "info": Object {
          "contrastText": "#fff",
          "dark": "#1976d2",
          "light": "#64b5f6",
          "main": "#2196f3",
        },
        "primary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "rgb(174, 105, 9)",
          "light": "rgb(250, 171, 61)",
          "main": "#F9970D",
        },
        "secondary": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "rgb(94, 109, 118)",
          "light": "rgb(159, 175, 186)",
          "main": "#879CA9",
        },
        "success": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#388e3c",
          "light": "#81c784",
          "main": "#4caf50",
        },
        "text": Object {
          "disabled": "rgba(0, 0, 0, 0.38)",
          "hint": "rgba(0, 0, 0, 0.38)",
          "primary": "rgba(0, 0, 0, 0.87)",
          "secondary": "rgba(0, 0, 0, 0.54)",
        },
        "tonalOffset": 0.2,
        "type": "light",
        "warning": Object {
          "contrastText": "rgba(0, 0, 0, 0.87)",
          "dark": "#f57c00",
          "light": "#ffb74d",
          "main": "#ff9800",
        },
      },
      "props": Object {},
      "shadows": Array [
        "none",
        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
      ],
      "shape": Object {
        "borderRadius": 4,
      },
      "spacing": [Function],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
        "getAutoHeightDuration": [Function],
      },
      "typography": Object {
        "body1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.5,
        },
        "body2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 400,
          "letterSpacing": "0.01071em",
          "lineHeight": 1.43,
        },
        "button": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.02857em",
          "lineHeight": 1.75,
          "textTransform": "uppercase",
        },
        "caption": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.03333em",
          "lineHeight": 1.66,
        },
        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
        "fontSize": 14,
        "fontWeightBold": 700,
        "fontWeightLight": 300,
        "fontWeightMedium": 500,
        "fontWeightRegular": 400,
        "h1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "6rem",
          "fontWeight": 300,
          "letterSpacing": "-0.01562em",
          "lineHeight": 1.167,
        },
        "h2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3.75rem",
          "fontWeight": 300,
          "letterSpacing": "-0.00833em",
          "lineHeight": 1.2,
        },
        "h3": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "3rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.167,
        },
        "h4": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "2.125rem",
          "fontWeight": 400,
          "letterSpacing": "0.00735em",
          "lineHeight": 1.235,
        },
        "h5": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.5rem",
          "fontWeight": 400,
          "letterSpacing": "0em",
          "lineHeight": 1.334,
        },
        "h6": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1.25rem",
          "fontWeight": 500,
          "letterSpacing": "0.0075em",
          "lineHeight": 1.6,
        },
        "htmlFontSize": 16,
        "overline": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.75rem",
          "fontWeight": 400,
          "letterSpacing": "0.08333em",
          "lineHeight": 2.66,
          "textTransform": "uppercase",
        },
        "pxToRem": [Function],
        "round": [Function],
        "subtitle1": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "1rem",
          "fontWeight": 400,
          "letterSpacing": "0.00938em",
          "lineHeight": 1.75,
        },
        "subtitle2": Object {
          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
          "fontSize": "0.875rem",
          "fontWeight": 500,
          "letterSpacing": "0.00714em",
          "lineHeight": 1.57,
        },
      },
      "zIndex": Object {
        "appBar": 1100,
        "drawer": 1200,
        "mobileStepper": 1000,
        "modal": 1300,
        "snackbar": 1400,
        "speedDial": 1050,
        "tooltip": 1500,
      },
      Symbol(mui.nested): false,
    }
  }
>
  <FormEditor
    component={[Function]}
    props={
      Object {
        "form": Object {
          "model": Object {
            "fields": Object {
              "firstName": Object {
                "path": "firstName",
              },
            },
            "id": "employee",
          },
        },
        "formIds": Array [
          "employee",
          "order",
        ],
        "onCancel": [Function],
        "onSave": [Function],
      }
    }
  >
    <styled.div
      aria-label="form-editor"
    >
      <StyledComponent
        aria-label="form-editor"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-Rmtcm",
              "isStatic": false,
              "lastClassName": "ePXgOL",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-Rmtcm",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          aria-label="form-editor"
          className="sc-Rmtcm ePXgOL"
        >
          <Form
            model={
              Object {
                "context": Object {
                  "formIds": Array [],
                },
                "data": Object {},
                "fields": Object {
                  "changeStateDebounceMaxWait": Object {
                    "component": Object {
                      "name": "NumberInput",
                      "state": Object {
                        "placeholder": "Default 250 ms",
                      },
                    },
                    "description": "Debounce changeState action for maximum x milliseconds, to improve performance and reduce form lifecycles",
                    "label": "Change State Debounce Max Wait",
                    "path": "settings.changeStateDebounceMaxWait",
                    "validators": Array [
                      Object {
                        "args": Object {
                          "value": 0,
                        },
                        "name": "min",
                      },
                    ],
                  },
                  "changeStateDebounceWait": Object {
                    "component": Object {
                      "name": "NumberInput",
                      "state": Object {
                        "placeholder": "Default 250 ms",
                      },
                    },
                    "description": "Debounce changeState action for x milliseconds, to improve performance and reduce form lifecycles",
                    "label": "Change State Debounce Wait",
                    "path": "settings.changeStateDebounceWait",
                    "validators": Array [
                      Object {
                        "args": Object {
                          "value": 0,
                        },
                        "name": "min",
                      },
                    ],
                  },
                  "changeValueDebounceMaxWait": Object {
                    "component": Object {
                      "name": "NumberInput",
                      "state": Object {
                        "placeholder": "Default 250 ms",
                      },
                    },
                    "description": "Debounce changeValue action for maximum x milliseconds, to improve performance and reduce form lifecycles",
                    "label": "Change Value Debounce Max Wait",
                    "path": "settings.changeValueDebounceMaxWait",
                    "validators": Array [
                      Object {
                        "args": Object {
                          "value": 0,
                        },
                        "name": "min",
                      },
                    ],
                  },
                  "changeValueDebounceWait": Object {
                    "component": Object {
                      "name": "NumberInput",
                      "state": Object {
                        "placeholder": "Default 250 ms",
                      },
                    },
                    "description": "Debounce changeValue action for x milliseconds, to improve performance and reduce form lifecycles",
                    "label": "Change Value Debounce Wait",
                    "path": "settings.changeValueDebounceWait",
                    "validators": Array [
                      Object {
                        "args": Object {
                          "value": 0,
                        },
                        "name": "min",
                      },
                    ],
                  },
                  "data": Object {
                    "component": Object {
                      "name": "JsonEditor",
                      "state": Object {
                        "height": "300px",
                      },
                    },
                    "description": "Initial fields values",
                    "label": "Initial Data",
                    "path": "model.data",
                  },
                  "fields": Object {
                    "component": Object {
                      "name": "Fields",
                    },
                    "description": "Fields of the form",
                    "label": "Fields",
                    "path": "model.fields",
                    "required": true,
                  },
                  "id": Object {
                    "component": Object {
                      "name": "TextInput",
                    },
                    "context": Array [
                      "formIds",
                    ],
                    "description": "Unique form id",
                    "label": "Id",
                    "path": "model.id",
                    "required": true,
                    "validators": Array [
                      Object {
                        "name": "uniqueId",
                      },
                    ],
                  },
                  "layouts": Object {
                    "component": Object {
                      "name": "Layouts",
                    },
                    "description": "Layouts of the form",
                    "label": "Layouts",
                    "path": "layouts",
                  },
                },
                "id": "edit-form",
              }
            }
            resources={
              Object {
                "components": Object {
                  "Fields": [Function],
                  "JsonEditor": [Function],
                  "Layouts": [Function],
                  "NumberInput": [Function],
                  "TextInput": [Function],
                },
                "validators": Object {
                  "uniqueId": Object {
                    "func": [Function],
                    "message": [Function],
                  },
                },
              }
            }
          >
            <BaseItem
              onCancel={[Function]}
              onSave={[Function]}
              sections={
                Array [
                  Object {
                    "grid": Object {
                      "elements": Array [
                        Object {
                          "component": [Function],
                          "gridArea": "id",
                          "props": Object {
                            "id": "id",
                          },
                          "selector": "#id",
                          "style": "max-width: 360px;",
                        },
                        Object {
                          "component": [Function],
                          "gridArea": "fields",
                          "props": Object {
                            "id": "fields",
                          },
                          "selector": "#fields",
                          "style": undefined,
                        },
                        Object {
                          "component": [Function],
                          "gridArea": "data",
                          "props": Object {
                            "id": "data",
                          },
                          "selector": "#data",
                          "style": "max-width: 360px;",
                        },
                      ],
                      "templateAreas": Array [
                        "id fields fields",
                        "data fields fields",
                      ],
                      "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                    },
                    "id": "model",
                    "title": "Model",
                  },
                  Object {
                    "grid": Object {
                      "elements": Array [
                        Object {
                          "component": [Function],
                          "gridArea": "changeValueDebounceWait",
                          "props": Object {
                            "id": "changeValueDebounceWait",
                          },
                          "selector": "#changeValueDebounceWait",
                          "style": "max-width: 360px;",
                        },
                        Object {
                          "component": [Function],
                          "gridArea": "changeStateDebounceWait",
                          "props": Object {
                            "id": "changeStateDebounceWait",
                          },
                          "selector": "#changeStateDebounceWait",
                          "style": "max-width: 360px;",
                        },
                        Object {
                          "component": [Function],
                          "gridArea": "changeValueDebounceMaxWait",
                          "props": Object {
                            "id": "changeValueDebounceMaxWait",
                          },
                          "selector": "#changeValueDebounceMaxWait",
                          "style": "max-width: 360px;",
                        },
                        Object {
                          "component": [Function],
                          "gridArea": "changeStateDebounceMaxWait",
                          "props": Object {
                            "id": "changeStateDebounceMaxWait",
                          },
                          "selector": "#changeStateDebounceMaxWait",
                          "style": "max-width: 360px;",
                        },
                      ],
                      "templateAreas": Array [
                        "changeValueDebounceWait changeStateDebounceWait .",
                        "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                      ],
                      "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                    },
                    "id": "settings",
                    "title": "Settings",
                  },
                  Object {
                    "grid": Object {
                      "elements": Array [
                        Object {
                          "component": [Function],
                          "gridArea": "layouts",
                          "props": Object {
                            "id": "layouts",
                          },
                          "selector": "#layouts",
                          "style": undefined,
                        },
                      ],
                      "templateAreas": Array [
                        "layouts layouts layouts",
                      ],
                      "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                    },
                    "id": "layouts",
                    "title": "Layouts",
                  },
                ]
              }
              title="Form - new"
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jzJRlG",
                        "isStatic": false,
                        "lastClassName": "hziaNZ",
                        "rules": Array [
                          "
  flex: 1;
  height: 100%;
  display: flex;
  flex-direction: row;

  > div {
    flex: 1;
  }
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-jzJRlG",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-jzJRlG hziaNZ"
                  >
                    <Item
                      layout="scroll"
                      mainActions={
                        Array [
                          Object {
                            "label": "Cancel",
                            "onClick": [Function],
                            "type": "tertiary",
                          },
                          Object {
                            "disable": [Function],
                            "label": "Save",
                            "onClick": [Function],
                            "popover": Object {
                              "component": [Function],
                              "open": [Function],
                              "props": Object {
                                "onClickField": [Function],
                              },
                              "targetRef": Object {
                                "current": <button
                                  button-type="primary"
                                  class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                  tabindex="0"
                                  type="button"
                                >
                                  <span
                                    class="MuiButton-label"
                                  >
                                    Save
                                  </span>
                                  <span
                                    class="MuiTouchRipple-root"
                                  />
                                </button>,
                              },
                              "title": "Handle Fields",
                            },
                            "type": "primary",
                          },
                        ]
                      }
                      optionsActions={
                        Array [
                          Object {
                            "label": "Show Json",
                            "onClick": [Function],
                          },
                        ]
                      }
                      sections={
                        Array [
                          Object {
                            "grid": Object {
                              "elements": Array [
                                Object {
                                  "component": [Function],
                                  "gridArea": "id",
                                  "props": Object {
                                    "id": "id",
                                  },
                                  "selector": "#id",
                                  "style": "max-width: 360px;",
                                },
                                Object {
                                  "component": [Function],
                                  "gridArea": "fields",
                                  "props": Object {
                                    "id": "fields",
                                  },
                                  "selector": "#fields",
                                  "style": undefined,
                                },
                                Object {
                                  "component": [Function],
                                  "gridArea": "data",
                                  "props": Object {
                                    "id": "data",
                                  },
                                  "selector": "#data",
                                  "style": "max-width: 360px;",
                                },
                              ],
                              "templateAreas": Array [
                                "id fields fields",
                                "data fields fields",
                              ],
                              "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                            },
                            "id": "model",
                            "title": "Model",
                          },
                          Object {
                            "grid": Object {
                              "elements": Array [
                                Object {
                                  "component": [Function],
                                  "gridArea": "changeValueDebounceWait",
                                  "props": Object {
                                    "id": "changeValueDebounceWait",
                                  },
                                  "selector": "#changeValueDebounceWait",
                                  "style": "max-width: 360px;",
                                },
                                Object {
                                  "component": [Function],
                                  "gridArea": "changeStateDebounceWait",
                                  "props": Object {
                                    "id": "changeStateDebounceWait",
                                  },
                                  "selector": "#changeStateDebounceWait",
                                  "style": "max-width: 360px;",
                                },
                                Object {
                                  "component": [Function],
                                  "gridArea": "changeValueDebounceMaxWait",
                                  "props": Object {
                                    "id": "changeValueDebounceMaxWait",
                                  },
                                  "selector": "#changeValueDebounceMaxWait",
                                  "style": "max-width: 360px;",
                                },
                                Object {
                                  "component": [Function],
                                  "gridArea": "changeStateDebounceMaxWait",
                                  "props": Object {
                                    "id": "changeStateDebounceMaxWait",
                                  },
                                  "selector": "#changeStateDebounceMaxWait",
                                  "style": "max-width: 360px;",
                                },
                              ],
                              "templateAreas": Array [
                                "changeValueDebounceWait changeStateDebounceWait .",
                                "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                              ],
                              "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                            },
                            "id": "settings",
                            "title": "Settings",
                          },
                          Object {
                            "grid": Object {
                              "elements": Array [
                                Object {
                                  "component": [Function],
                                  "gridArea": "layouts",
                                  "props": Object {
                                    "id": "layouts",
                                  },
                                  "selector": "#layouts",
                                  "style": undefined,
                                },
                              ],
                              "templateAreas": Array [
                                "layouts layouts layouts",
                              ],
                              "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                            },
                            "id": "layouts",
                            "title": "Layouts",
                          },
                        ]
                      }
                      title="Form - new"
                    >
                      <ItemView
                        footer={
                          Object {
                            "actions": Array [
                              Object {
                                "disabled": undefined,
                                "label": "Cancel",
                                "onClick": [Function],
                                "type": "tertiary",
                              },
                              Object {
                                "disable": [Function],
                                "disabled": false,
                                "elementRef": Object {
                                  "current": <button
                                    button-type="primary"
                                    class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                    tabindex="0"
                                    type="button"
                                  >
                                    <span
                                      class="MuiButton-label"
                                    >
                                      Save
                                    </span>
                                    <span
                                      class="MuiTouchRipple-root"
                                    />
                                  </button>,
                                },
                                "label": "Save",
                                "onClick": [Function],
                                "popover": Object {
                                  "component": [Function],
                                  "open": [Function],
                                  "props": Object {
                                    "onClickField": [Function],
                                  },
                                  "targetRef": Object {
                                    "current": <button
                                      button-type="primary"
                                      class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                      tabindex="0"
                                      type="button"
                                    >
                                      <span
                                        class="MuiButton-label"
                                      >
                                        Save
                                      </span>
                                      <span
                                        class="MuiTouchRipple-root"
                                      />
                                    </button>,
                                  },
                                  "title": "Handle Fields",
                                },
                                "type": "primary",
                              },
                            ],
                          }
                        }
                        options={
                          Object {
                            "actions": Array [
                              Object {
                                "disabled": undefined,
                                "label": "Show Json",
                                "onClick": [Function],
                              },
                            ],
                          }
                        }
                        sections={
                          Array [
                            Object {
                              "grid": Object {
                                "elements": Array [
                                  Object {
                                    "component": [Function],
                                    "gridArea": "id",
                                    "props": Object {
                                      "id": "id",
                                    },
                                    "selector": "#id",
                                    "style": "max-width: 360px;",
                                  },
                                  Object {
                                    "component": [Function],
                                    "gridArea": "fields",
                                    "props": Object {
                                      "id": "fields",
                                    },
                                    "selector": "#fields",
                                    "style": undefined,
                                  },
                                  Object {
                                    "component": [Function],
                                    "gridArea": "data",
                                    "props": Object {
                                      "id": "data",
                                    },
                                    "selector": "#data",
                                    "style": "max-width: 360px;",
                                  },
                                ],
                                "templateAreas": Array [
                                  "id fields fields",
                                  "data fields fields",
                                ],
                                "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                              },
                              "id": "model",
                              "ref": Object {
                                "current": <div
                                  class="sc-eqIVtm bImGjh"
                                  id="model"
                                >
                                  <div
                                    class="sc-fAjcbJ cTtLju"
                                  >
                                    Model
                                  </div>
                                  <div
                                    class="sc-htoDjs fSYDjH"
                                  />
                                </div>,
                              },
                              "title": "Model",
                            },
                            Object {
                              "grid": Object {
                                "elements": Array [
                                  Object {
                                    "component": [Function],
                                    "gridArea": "changeValueDebounceWait",
                                    "props": Object {
                                      "id": "changeValueDebounceWait",
                                    },
                                    "selector": "#changeValueDebounceWait",
                                    "style": "max-width: 360px;",
                                  },
                                  Object {
                                    "component": [Function],
                                    "gridArea": "changeStateDebounceWait",
                                    "props": Object {
                                      "id": "changeStateDebounceWait",
                                    },
                                    "selector": "#changeStateDebounceWait",
                                    "style": "max-width: 360px;",
                                  },
                                  Object {
                                    "component": [Function],
                                    "gridArea": "changeValueDebounceMaxWait",
                                    "props": Object {
                                      "id": "changeValueDebounceMaxWait",
                                    },
                                    "selector": "#changeValueDebounceMaxWait",
                                    "style": "max-width: 360px;",
                                  },
                                  Object {
                                    "component": [Function],
                                    "gridArea": "changeStateDebounceMaxWait",
                                    "props": Object {
                                      "id": "changeStateDebounceMaxWait",
                                    },
                                    "selector": "#changeStateDebounceMaxWait",
                                    "style": "max-width: 360px;",
                                  },
                                ],
                                "templateAreas": Array [
                                  "changeValueDebounceWait changeStateDebounceWait .",
                                  "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                ],
                                "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                              },
                              "id": "settings",
                              "ref": Object {
                                "current": <div
                                  class="sc-eqIVtm bImGjh"
                                  id="settings"
                                >
                                  <div
                                    class="sc-fAjcbJ cTtLju"
                                  >
                                    Settings
                                  </div>
                                  <div
                                    class="sc-htoDjs fEFlnx"
                                  />
                                </div>,
                              },
                              "title": "Settings",
                            },
                            Object {
                              "grid": Object {
                                "elements": Array [
                                  Object {
                                    "component": [Function],
                                    "gridArea": "layouts",
                                    "props": Object {
                                      "id": "layouts",
                                    },
                                    "selector": "#layouts",
                                    "style": undefined,
                                  },
                                ],
                                "templateAreas": Array [
                                  "layouts layouts layouts",
                                ],
                                "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                              },
                              "id": "layouts",
                              "ref": Object {
                                "current": <div
                                  class="sc-eqIVtm bImGjh"
                                  id="layouts"
                                >
                                  <div
                                    class="sc-fAjcbJ cTtLju"
                                  >
                                    Layouts
                                  </div>
                                  <div
                                    class="sc-htoDjs hAXSqa"
                                  />
                                </div>,
                              },
                              "title": "Layouts",
                            },
                          ]
                        }
                        sectionsRef={
                          Object {
                            "current": <div
                              aria-label="Sections"
                              class="sc-dVhcbM brKJrD"
                            >
                              <div
                                class="sc-eqIVtm bImGjh"
                                id="model"
                              >
                                <div
                                  class="sc-fAjcbJ cTtLju"
                                >
                                  Model
                                </div>
                                <div
                                  class="sc-htoDjs fSYDjH"
                                />
                              </div>
                              <div
                                class="sc-eqIVtm bImGjh"
                                id="settings"
                              >
                                <div
                                  class="sc-fAjcbJ cTtLju"
                                >
                                  Settings
                                </div>
                                <div
                                  class="sc-htoDjs fEFlnx"
                                />
                              </div>
                              <div
                                class="sc-eqIVtm bImGjh"
                                id="layouts"
                              >
                                <div
                                  class="sc-fAjcbJ cTtLju"
                                >
                                  Layouts
                                </div>
                                <div
                                  class="sc-htoDjs hAXSqa"
                                />
                              </div>
                            </div>,
                          }
                        }
                        size={4}
                        tabs={
                          Object {
                            "items": Array [
                              Object {
                                "label": "Model",
                                "value": "model",
                              },
                              Object {
                                "label": "Settings",
                                "value": "settings",
                              },
                              Object {
                                "label": "Layouts",
                                "value": "layouts",
                              },
                            ],
                            "onChange": [Function],
                            "value": "model",
                          }
                        }
                        title="Form - new"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bRBYWo",
                                  "isStatic": false,
                                  "lastClassName": "dmQgKJ",
                                  "rules": Array [
                                    "
        color: #3d3d3d;
        background-color: #fff;
        height:100%;
        display: flex;
        flex-direction: column;
      ",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bRBYWo",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bRBYWo dmQgKJ"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-hzDkRC",
                                        "isStatic": false,
                                        "lastClassName": "kiRGDk",
                                        "rules": Array [
                                          "
        flex: 0 0 auto;
        padding: 0 ",
                                          [Function],
                                          "px;
        border-bottom: 3px solid #e1e1e1;
        position: relative;
        min-height: 48px;
        position: relative;
      ",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-hzDkRC",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-hzDkRC kiRGDk"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-fBuWsC",
                                              "isStatic": false,
                                              "lastClassName": "lkJSyu",
                                              "rules": Array [
                                                "
        font-size: ",
                                                [Function],
                                                "px;
        font-weight: 500;
        margin: 0;
        padding: ",
                                                [Function],
                                                ";
      ",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-fBuWsC",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-fBuWsC lkJSyu"
                                        >
                                          Form - new
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jhAzac",
                                              "isStatic": false,
                                              "lastClassName": "cEzfQW",
                                              "rules": Array [
                                                "
        position: absolute;
        right: 15px;
        bottom: 0;
      ",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jhAzac",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-jhAzac cEzfQW"
                                        >
                                          <Options
                                            options={
                                              Array [
                                                Object {
                                                  "disabled": undefined,
                                                  "label": "Show Json",
                                                  "onClick": [Function],
                                                },
                                              ]
                                            }
                                          >
                                            <div>
                                              <WithStyles(ForwardRef(IconButton))
                                                aria-haspopup="true"
                                                aria-label="Options"
                                                color="primary"
                                                onClick={[Function]}
                                              >
                                                <ForwardRef(IconButton)
                                                  aria-haspopup="true"
                                                  aria-label="Options"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiIconButton-colorInherit",
                                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                                      "edgeStart": "MuiIconButton-edgeStart",
                                                      "label": "MuiIconButton-label",
                                                      "root": "MuiIconButton-root",
                                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                                    }
                                                  }
                                                  color="primary"
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-haspopup="true"
                                                    aria-label="Options"
                                                    centerRipple={true}
                                                    className="MuiIconButton-root MuiIconButton-colorPrimary"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-haspopup="true"
                                                      aria-label="Options"
                                                      centerRipple={true}
                                                      className="MuiIconButton-root MuiIconButton-colorPrimary"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                    >
                                                      <button
                                                        aria-haspopup="true"
                                                        aria-label="Options"
                                                        className="MuiButtonBase-root MuiIconButton-root MuiIconButton-colorPrimary"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiIconButton-label"
                                                        >
                                                          <ForwardRef>
                                                            <WithStyles(ForwardRef(SvgIcon))>
                                                              <ForwardRef(SvgIcon)
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                    "colorError": "MuiSvgIcon-colorError",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                    "root": "MuiSvgIcon-root",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="MuiSvgIcon-root"
                                                                  focusable="false"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </WithStyles(ForwardRef(SvgIcon))>
                                                          </ForwardRef>
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={true}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={true}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(IconButton)>
                                              </WithStyles(ForwardRef(IconButton))>
                                              <Menu
                                                anchorEl={null}
                                                onClose={[Function]}
                                                open={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "disabled": undefined,
                                                      "label": "Show Json",
                                                      "onClick": [Function],
                                                    },
                                                  ]
                                                }
                                                style={
                                                  Object {
                                                    "maxHeight": 216,
                                                    "width": 200,
                                                  }
                                                }
                                              >
                                                <WithStyles(ForwardRef(Menu))
                                                  PaperProps={
                                                    Object {
                                                      "style": Object {
                                                        "maxHeight": 216,
                                                        "width": 200,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={null}
                                                  id="options-menu"
                                                  onClose={[Function]}
                                                  open={false}
                                                >
                                                  <ForwardRef(Menu)
                                                    PaperProps={
                                                      Object {
                                                        "style": Object {
                                                          "maxHeight": 216,
                                                          "width": 200,
                                                        },
                                                      }
                                                    }
                                                    anchorEl={null}
                                                    classes={
                                                      Object {
                                                        "list": "MuiMenu-list",
                                                        "paper": "MuiMenu-paper",
                                                      }
                                                    }
                                                    id="options-menu"
                                                    onClose={[Function]}
                                                    open={false}
                                                  >
                                                    <WithStyles(ForwardRef(Popover))
                                                      PaperProps={
                                                        Object {
                                                          "classes": Object {
                                                            "root": "MuiMenu-paper",
                                                          },
                                                          "style": Object {
                                                            "maxHeight": 216,
                                                            "width": 200,
                                                          },
                                                        }
                                                      }
                                                      anchorEl={null}
                                                      id="options-menu"
                                                      onClose={[Function]}
                                                      onEntering={[Function]}
                                                      open={false}
                                                      transitionDuration="auto"
                                                    >
                                                      <ForwardRef(Popover)
                                                        PaperProps={
                                                          Object {
                                                            "classes": Object {
                                                              "root": "MuiMenu-paper",
                                                            },
                                                            "style": Object {
                                                              "maxHeight": 216,
                                                              "width": 200,
                                                            },
                                                          }
                                                        }
                                                        anchorEl={null}
                                                        classes={
                                                          Object {
                                                            "paper": "MuiPopover-paper",
                                                            "root": "MuiPopover-root",
                                                          }
                                                        }
                                                        id="options-menu"
                                                        onClose={[Function]}
                                                        onEntering={[Function]}
                                                        open={false}
                                                        transitionDuration="auto"
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="MuiPopover-root"
                                                          id="options-menu"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </ForwardRef(Menu)>
                                                </WithStyles(ForwardRef(Menu))>
                                              </Menu>
                                            </div>
                                          </Options>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-fMiknA",
                                              "isStatic": false,
                                              "lastClassName": "cLJvYa",
                                              "rules": Array [
                                                "
        position: relative;
        top: 3px;
        left: -10px;
      ",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-fMiknA",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-fMiknA cLJvYa"
                                        >
                                          <WithStyles(ForwardRef(Tabs))
                                            aria-label="Tabs"
                                            indicatorColor="primary"
                                            onChange={[Function]}
                                            textColor="primary"
                                            value="model"
                                          >
                                            <ForwardRef(Tabs)
                                              aria-label="Tabs"
                                              classes={
                                                Object {
                                                  "centered": "MuiTabs-centered",
                                                  "fixed": "MuiTabs-fixed",
                                                  "flexContainer": "MuiTabs-flexContainer",
                                                  "flexContainerVertical": "MuiTabs-flexContainerVertical",
                                                  "indicator": "MuiTabs-indicator",
                                                  "root": "MuiTabs-root",
                                                  "scrollButtons": "MuiTabs-scrollButtons",
                                                  "scrollButtonsDesktop": "MuiTabs-scrollButtonsDesktop",
                                                  "scrollable": "MuiTabs-scrollable",
                                                  "scroller": "MuiTabs-scroller",
                                                  "vertical": "MuiTabs-vertical",
                                                }
                                              }
                                              indicatorColor="primary"
                                              onChange={[Function]}
                                              textColor="primary"
                                              value="model"
                                            >
                                              <div
                                                className="MuiTabs-root"
                                              >
                                                <div
                                                  className="MuiTabs-scroller MuiTabs-fixed"
                                                  onScroll={[Function]}
                                                  style={
                                                    Object {
                                                      "marginBottom": null,
                                                      "overflow": "hidden",
                                                    }
                                                  }
                                                >
                                                  <div
                                                    aria-label="Tabs"
                                                    className="MuiTabs-flexContainer"
                                                    onKeyDown={[Function]}
                                                    role="tablist"
                                                  >
                                                    <WithStyles(ForwardRef(Tab))
                                                      fullWidth={false}
                                                      indicator={false}
                                                      key=".$model"
                                                      label="Model"
                                                      onChange={[Function]}
                                                      selected={true}
                                                      textColor="primary"
                                                      value="model"
                                                    >
                                                      <ForwardRef(Tab)
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "fullWidth": "MuiTab-fullWidth",
                                                            "labelIcon": "MuiTab-labelIcon",
                                                            "root": "MuiTab-root",
                                                            "selected": "Mui-selected",
                                                            "textColorInherit": "MuiTab-textColorInherit",
                                                            "textColorPrimary": "MuiTab-textColorPrimary",
                                                            "textColorSecondary": "MuiTab-textColorSecondary",
                                                            "wrapped": "MuiTab-wrapped",
                                                            "wrapper": "MuiTab-wrapper",
                                                          }
                                                        }
                                                        fullWidth={false}
                                                        indicator={false}
                                                        label="Model"
                                                        onChange={[Function]}
                                                        selected={true}
                                                        textColor="primary"
                                                        value="model"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          aria-selected={true}
                                                          className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          role="tab"
                                                          tabIndex={0}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            aria-selected={true}
                                                            className="MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            role="tab"
                                                            tabIndex={0}
                                                          >
                                                            <button
                                                              aria-selected={true}
                                                              className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary Mui-selected"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              role="tab"
                                                              tabIndex={0}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiTab-wrapper"
                                                              >
                                                                Model
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={false}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={false}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Tab)>
                                                    </WithStyles(ForwardRef(Tab))>
                                                    <WithStyles(ForwardRef(Tab))
                                                      fullWidth={false}
                                                      indicator={false}
                                                      key=".$settings"
                                                      label="Settings"
                                                      onChange={[Function]}
                                                      selected={false}
                                                      textColor="primary"
                                                      value="settings"
                                                    >
                                                      <ForwardRef(Tab)
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "fullWidth": "MuiTab-fullWidth",
                                                            "labelIcon": "MuiTab-labelIcon",
                                                            "root": "MuiTab-root",
                                                            "selected": "Mui-selected",
                                                            "textColorInherit": "MuiTab-textColorInherit",
                                                            "textColorPrimary": "MuiTab-textColorPrimary",
                                                            "textColorSecondary": "MuiTab-textColorSecondary",
                                                            "wrapped": "MuiTab-wrapped",
                                                            "wrapper": "MuiTab-wrapper",
                                                          }
                                                        }
                                                        fullWidth={false}
                                                        indicator={false}
                                                        label="Settings"
                                                        onChange={[Function]}
                                                        selected={false}
                                                        textColor="primary"
                                                        value="settings"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          aria-selected={false}
                                                          className="MuiTab-root MuiTab-textColorPrimary"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          role="tab"
                                                          tabIndex={-1}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            aria-selected={false}
                                                            className="MuiTab-root MuiTab-textColorPrimary"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            role="tab"
                                                            tabIndex={-1}
                                                          >
                                                            <button
                                                              aria-selected={false}
                                                              className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              role="tab"
                                                              tabIndex={-1}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiTab-wrapper"
                                                              >
                                                                Settings
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={false}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={false}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Tab)>
                                                    </WithStyles(ForwardRef(Tab))>
                                                    <WithStyles(ForwardRef(Tab))
                                                      fullWidth={false}
                                                      indicator={false}
                                                      key=".$layouts"
                                                      label="Layouts"
                                                      onChange={[Function]}
                                                      selected={false}
                                                      textColor="primary"
                                                      value="layouts"
                                                    >
                                                      <ForwardRef(Tab)
                                                        classes={
                                                          Object {
                                                            "disabled": "Mui-disabled",
                                                            "fullWidth": "MuiTab-fullWidth",
                                                            "labelIcon": "MuiTab-labelIcon",
                                                            "root": "MuiTab-root",
                                                            "selected": "Mui-selected",
                                                            "textColorInherit": "MuiTab-textColorInherit",
                                                            "textColorPrimary": "MuiTab-textColorPrimary",
                                                            "textColorSecondary": "MuiTab-textColorSecondary",
                                                            "wrapped": "MuiTab-wrapped",
                                                            "wrapper": "MuiTab-wrapper",
                                                          }
                                                        }
                                                        fullWidth={false}
                                                        indicator={false}
                                                        label="Layouts"
                                                        onChange={[Function]}
                                                        selected={false}
                                                        textColor="primary"
                                                        value="layouts"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          aria-selected={false}
                                                          className="MuiTab-root MuiTab-textColorPrimary"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          role="tab"
                                                          tabIndex={-1}
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            aria-selected={false}
                                                            className="MuiTab-root MuiTab-textColorPrimary"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            focusRipple={true}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            role="tab"
                                                            tabIndex={-1}
                                                          >
                                                            <button
                                                              aria-selected={false}
                                                              className="MuiButtonBase-root MuiTab-root MuiTab-textColorPrimary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              role="tab"
                                                              tabIndex={-1}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiTab-wrapper"
                                                              >
                                                                Layouts
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={false}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={false}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Tab)>
                                                    </WithStyles(ForwardRef(Tab))>
                                                  </div>
                                                  <WithStyles(ForwardRef(TabIndicator))
                                                    className="MuiTabs-indicator"
                                                    color="primary"
                                                    orientation="horizontal"
                                                    style={
                                                      Object {
                                                        "left": 0,
                                                        "width": 0,
                                                      }
                                                    }
                                                  >
                                                    <ForwardRef(TabIndicator)
                                                      className="MuiTabs-indicator"
                                                      classes={
                                                        Object {
                                                          "colorPrimary": "PrivateTabIndicator-colorPrimary-2",
                                                          "colorSecondary": "PrivateTabIndicator-colorSecondary-3",
                                                          "root": "PrivateTabIndicator-root-1",
                                                          "vertical": "PrivateTabIndicator-vertical-4",
                                                        }
                                                      }
                                                      color="primary"
                                                      orientation="horizontal"
                                                      style={
                                                        Object {
                                                          "left": 0,
                                                          "width": 0,
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="PrivateTabIndicator-root-1 PrivateTabIndicator-colorPrimary-2 MuiTabs-indicator"
                                                        style={
                                                          Object {
                                                            "left": 0,
                                                            "width": 0,
                                                          }
                                                        }
                                                      />
                                                    </ForwardRef(TabIndicator)>
                                                  </WithStyles(ForwardRef(TabIndicator))>
                                                </div>
                                              </div>
                                            </ForwardRef(Tabs)>
                                          </WithStyles(ForwardRef(Tabs))>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.div
                                aria-label="Sections"
                              >
                                <StyledComponent
                                  aria-label="Sections"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dVhcbM",
                                        "isStatic": false,
                                        "lastClassName": "brKJrD",
                                        "rules": Array [
                                          "
        flex-grow: 1;
        overflow-y: auto;
      ",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dVhcbM",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={
                                    Object {
                                      "current": <div
                                        aria-label="Sections"
                                        class="sc-dVhcbM brKJrD"
                                      >
                                        <div
                                          class="sc-eqIVtm bImGjh"
                                          id="model"
                                        >
                                          <div
                                            class="sc-fAjcbJ cTtLju"
                                          >
                                            Model
                                          </div>
                                          <div
                                            class="sc-htoDjs fSYDjH"
                                          />
                                        </div>
                                        <div
                                          class="sc-eqIVtm bImGjh"
                                          id="settings"
                                        >
                                          <div
                                            class="sc-fAjcbJ cTtLju"
                                          >
                                            Settings
                                          </div>
                                          <div
                                            class="sc-htoDjs fEFlnx"
                                          />
                                        </div>
                                        <div
                                          class="sc-eqIVtm bImGjh"
                                          id="layouts"
                                        >
                                          <div
                                            class="sc-fAjcbJ cTtLju"
                                          >
                                            Layouts
                                          </div>
                                          <div
                                            class="sc-htoDjs hAXSqa"
                                          />
                                        </div>
                                      </div>,
                                    }
                                  }
                                >
                                  <div
                                    aria-label="Sections"
                                    className="sc-dVhcbM brKJrD"
                                  >
                                    <ForwardRef
                                      grid={
                                        Object {
                                          "elements": Array [
                                            Object {
                                              "component": [Function],
                                              "gridArea": "id",
                                              "props": Object {
                                                "id": "id",
                                              },
                                              "selector": "#id",
                                              "style": "max-width: 360px;",
                                            },
                                            Object {
                                              "component": [Function],
                                              "gridArea": "fields",
                                              "props": Object {
                                                "id": "fields",
                                              },
                                              "selector": "#fields",
                                              "style": undefined,
                                            },
                                            Object {
                                              "component": [Function],
                                              "gridArea": "data",
                                              "props": Object {
                                                "id": "data",
                                              },
                                              "selector": "#data",
                                              "style": "max-width: 360px;",
                                            },
                                          ],
                                          "templateAreas": Array [
                                            "id fields fields",
                                            "data fields fields",
                                          ],
                                          "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                        }
                                      }
                                      id="model"
                                      key="model"
                                      size={4}
                                      title="Model"
                                    >
                                      <Section
                                        boxes={Array []}
                                        grid={
                                          Object {
                                            "elements": Array [
                                              Object {
                                                "component": [Function],
                                                "gridArea": "id",
                                                "props": Object {
                                                  "id": "id",
                                                },
                                                "selector": "#id",
                                                "style": "max-width: 360px;",
                                              },
                                              Object {
                                                "component": [Function],
                                                "gridArea": "fields",
                                                "props": Object {
                                                  "id": "fields",
                                                },
                                                "selector": "#fields",
                                                "style": undefined,
                                              },
                                              Object {
                                                "component": [Function],
                                                "gridArea": "data",
                                                "props": Object {
                                                  "id": "data",
                                                },
                                                "selector": "#data",
                                                "style": "max-width: 360px;",
                                              },
                                            ],
                                            "templateAreas": Array [
                                              "id fields fields",
                                              "data fields fields",
                                            ],
                                            "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                          }
                                        }
                                        id="model"
                                        innerRef={
                                          Object {
                                            "current": <div
                                              class="sc-eqIVtm bImGjh"
                                              id="model"
                                            >
                                              <div
                                                class="sc-fAjcbJ cTtLju"
                                              >
                                                Model
                                              </div>
                                              <div
                                                class="sc-htoDjs fSYDjH"
                                              />
                                            </div>,
                                          }
                                        }
                                        root={true}
                                        size={4}
                                        title="Model"
                                      >
                                        <styled.div
                                          id="model"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-eqIVtm",
                                                  "isStatic": false,
                                                  "lastClassName": "bImGjh",
                                                  "rules": Array [
                                                    "
        padding: ",
                                                    [Function],
                                                    ";
        border-bottom: ",
                                                    [Function],
                                                    ";
        &:last-child {
          border-bottom: none;
        }
      ",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-eqIVtm",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={
                                              Object {
                                                "current": <div
                                                  class="sc-eqIVtm bImGjh"
                                                  id="model"
                                                >
                                                  <div
                                                    class="sc-fAjcbJ cTtLju"
                                                  >
                                                    Model
                                                  </div>
                                                  <div
                                                    class="sc-htoDjs fSYDjH"
                                                  />
                                                </div>,
                                              }
                                            }
                                            id="model"
                                          >
                                            <div
                                              className="sc-eqIVtm bImGjh"
                                              id="model"
                                            >
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-fAjcbJ",
                                                        "isStatic": false,
                                                        "lastClassName": "cTtLju",
                                                        "rules": Array [
                                                          "
        text-transform: uppercase;
        line-height: 1.1;
        color: inherit;
        font-size: ",
                                                          [Function],
                                                          "px;
        font-weight: ",
                                                          [Function],
                                                          ";
        padding-bottom: ",
                                                          [Function],
                                                          "px;
        margin: 0;
      ",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-fAjcbJ",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-fAjcbJ cTtLju"
                                                  >
                                                    Model
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <CssGrid
                                                elements={
                                                  Array [
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "id",
                                                      "props": Object {
                                                        "id": "id",
                                                      },
                                                      "selector": "#id",
                                                      "style": "max-width: 360px;",
                                                    },
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "fields",
                                                      "props": Object {
                                                        "id": "fields",
                                                      },
                                                      "selector": "#fields",
                                                      "style": undefined,
                                                    },
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "data",
                                                      "props": Object {
                                                        "id": "data",
                                                      },
                                                      "selector": "#data",
                                                      "style": "max-width: 360px;",
                                                    },
                                                  ]
                                                }
                                                templateAreas={
                                                  Array [
                                                    "id fields fields",
                                                    "data fields fields",
                                                  ]
                                                }
                                                templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                              >
                                                <styled.div
                                                  elements={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "id",
                                                        "props": Object {
                                                          "id": "id",
                                                        },
                                                        "selector": "#id",
                                                        "style": "max-width: 360px;",
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "fields",
                                                        "props": Object {
                                                          "id": "fields",
                                                        },
                                                        "selector": "#fields",
                                                        "style": undefined,
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "data",
                                                        "props": Object {
                                                          "id": "data",
                                                        },
                                                        "selector": "#data",
                                                        "style": "max-width: 360px;",
                                                      },
                                                    ]
                                                  }
                                                  templateAreas={
                                                    Array [
                                                      "id fields fields",
                                                      "data fields fields",
                                                    ]
                                                  }
                                                  templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                >
                                                  <StyledComponent
                                                    elements={
                                                      Array [
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "id",
                                                          "props": Object {
                                                            "id": "id",
                                                          },
                                                          "selector": "#id",
                                                          "style": "max-width: 360px;",
                                                        },
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "fields",
                                                          "props": Object {
                                                            "id": "fields",
                                                          },
                                                          "selector": "#fields",
                                                          "style": undefined,
                                                        },
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "data",
                                                          "props": Object {
                                                            "id": "data",
                                                          },
                                                          "selector": "#data",
                                                          "style": "max-width: 360px;",
                                                        },
                                                      ]
                                                    }
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-htoDjs",
                                                          "isStatic": false,
                                                          "lastClassName": "hAXSqa",
                                                          "rules": Array [
                                                            "
  display: grid;
  grid-template-areas: ",
                                                            [Function],
                                                            ";
  grid-template-columns: ",
                                                            [Function],
                                                            ";
  grid-gap: ",
                                                            [Function],
                                                            ";
  
  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-htoDjs",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    templateAreas={
                                                      Array [
                                                        "id fields fields",
                                                        "data fields fields",
                                                      ]
                                                    }
                                                    templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                  >
                                                    <div
                                                      className="sc-htoDjs fSYDjH"
                                                    >
                                                      <Field
                                                        id="id"
                                                        key="0"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="id"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                      <Field
                                                        id="fields"
                                                        key="1"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="fields"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                      <Field
                                                        id="data"
                                                        key="2"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="data"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                              </CssGrid>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Section>
                                    </ForwardRef>
                                    <ForwardRef
                                      grid={
                                        Object {
                                          "elements": Array [
                                            Object {
                                              "component": [Function],
                                              "gridArea": "changeValueDebounceWait",
                                              "props": Object {
                                                "id": "changeValueDebounceWait",
                                              },
                                              "selector": "#changeValueDebounceWait",
                                              "style": "max-width: 360px;",
                                            },
                                            Object {
                                              "component": [Function],
                                              "gridArea": "changeStateDebounceWait",
                                              "props": Object {
                                                "id": "changeStateDebounceWait",
                                              },
                                              "selector": "#changeStateDebounceWait",
                                              "style": "max-width: 360px;",
                                            },
                                            Object {
                                              "component": [Function],
                                              "gridArea": "changeValueDebounceMaxWait",
                                              "props": Object {
                                                "id": "changeValueDebounceMaxWait",
                                              },
                                              "selector": "#changeValueDebounceMaxWait",
                                              "style": "max-width: 360px;",
                                            },
                                            Object {
                                              "component": [Function],
                                              "gridArea": "changeStateDebounceMaxWait",
                                              "props": Object {
                                                "id": "changeStateDebounceMaxWait",
                                              },
                                              "selector": "#changeStateDebounceMaxWait",
                                              "style": "max-width: 360px;",
                                            },
                                          ],
                                          "templateAreas": Array [
                                            "changeValueDebounceWait changeStateDebounceWait .",
                                            "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                          ],
                                          "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                        }
                                      }
                                      id="settings"
                                      key="settings"
                                      size={4}
                                      title="Settings"
                                    >
                                      <Section
                                        boxes={Array []}
                                        grid={
                                          Object {
                                            "elements": Array [
                                              Object {
                                                "component": [Function],
                                                "gridArea": "changeValueDebounceWait",
                                                "props": Object {
                                                  "id": "changeValueDebounceWait",
                                                },
                                                "selector": "#changeValueDebounceWait",
                                                "style": "max-width: 360px;",
                                              },
                                              Object {
                                                "component": [Function],
                                                "gridArea": "changeStateDebounceWait",
                                                "props": Object {
                                                  "id": "changeStateDebounceWait",
                                                },
                                                "selector": "#changeStateDebounceWait",
                                                "style": "max-width: 360px;",
                                              },
                                              Object {
                                                "component": [Function],
                                                "gridArea": "changeValueDebounceMaxWait",
                                                "props": Object {
                                                  "id": "changeValueDebounceMaxWait",
                                                },
                                                "selector": "#changeValueDebounceMaxWait",
                                                "style": "max-width: 360px;",
                                              },
                                              Object {
                                                "component": [Function],
                                                "gridArea": "changeStateDebounceMaxWait",
                                                "props": Object {
                                                  "id": "changeStateDebounceMaxWait",
                                                },
                                                "selector": "#changeStateDebounceMaxWait",
                                                "style": "max-width: 360px;",
                                              },
                                            ],
                                            "templateAreas": Array [
                                              "changeValueDebounceWait changeStateDebounceWait .",
                                              "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                            ],
                                            "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                          }
                                        }
                                        id="settings"
                                        innerRef={
                                          Object {
                                            "current": <div
                                              class="sc-eqIVtm bImGjh"
                                              id="settings"
                                            >
                                              <div
                                                class="sc-fAjcbJ cTtLju"
                                              >
                                                Settings
                                              </div>
                                              <div
                                                class="sc-htoDjs fEFlnx"
                                              />
                                            </div>,
                                          }
                                        }
                                        root={true}
                                        size={4}
                                        title="Settings"
                                      >
                                        <styled.div
                                          id="settings"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-eqIVtm",
                                                  "isStatic": false,
                                                  "lastClassName": "bImGjh",
                                                  "rules": Array [
                                                    "
        padding: ",
                                                    [Function],
                                                    ";
        border-bottom: ",
                                                    [Function],
                                                    ";
        &:last-child {
          border-bottom: none;
        }
      ",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-eqIVtm",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={
                                              Object {
                                                "current": <div
                                                  class="sc-eqIVtm bImGjh"
                                                  id="settings"
                                                >
                                                  <div
                                                    class="sc-fAjcbJ cTtLju"
                                                  >
                                                    Settings
                                                  </div>
                                                  <div
                                                    class="sc-htoDjs fEFlnx"
                                                  />
                                                </div>,
                                              }
                                            }
                                            id="settings"
                                          >
                                            <div
                                              className="sc-eqIVtm bImGjh"
                                              id="settings"
                                            >
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-fAjcbJ",
                                                        "isStatic": false,
                                                        "lastClassName": "cTtLju",
                                                        "rules": Array [
                                                          "
        text-transform: uppercase;
        line-height: 1.1;
        color: inherit;
        font-size: ",
                                                          [Function],
                                                          "px;
        font-weight: ",
                                                          [Function],
                                                          ";
        padding-bottom: ",
                                                          [Function],
                                                          "px;
        margin: 0;
      ",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-fAjcbJ",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-fAjcbJ cTtLju"
                                                  >
                                                    Settings
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <CssGrid
                                                elements={
                                                  Array [
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "changeValueDebounceWait",
                                                      "props": Object {
                                                        "id": "changeValueDebounceWait",
                                                      },
                                                      "selector": "#changeValueDebounceWait",
                                                      "style": "max-width: 360px;",
                                                    },
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "changeStateDebounceWait",
                                                      "props": Object {
                                                        "id": "changeStateDebounceWait",
                                                      },
                                                      "selector": "#changeStateDebounceWait",
                                                      "style": "max-width: 360px;",
                                                    },
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "changeValueDebounceMaxWait",
                                                      "props": Object {
                                                        "id": "changeValueDebounceMaxWait",
                                                      },
                                                      "selector": "#changeValueDebounceMaxWait",
                                                      "style": "max-width: 360px;",
                                                    },
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "changeStateDebounceMaxWait",
                                                      "props": Object {
                                                        "id": "changeStateDebounceMaxWait",
                                                      },
                                                      "selector": "#changeStateDebounceMaxWait",
                                                      "style": "max-width: 360px;",
                                                    },
                                                  ]
                                                }
                                                templateAreas={
                                                  Array [
                                                    "changeValueDebounceWait changeStateDebounceWait .",
                                                    "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                                  ]
                                                }
                                                templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                              >
                                                <styled.div
                                                  elements={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "changeValueDebounceWait",
                                                        "props": Object {
                                                          "id": "changeValueDebounceWait",
                                                        },
                                                        "selector": "#changeValueDebounceWait",
                                                        "style": "max-width: 360px;",
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "changeStateDebounceWait",
                                                        "props": Object {
                                                          "id": "changeStateDebounceWait",
                                                        },
                                                        "selector": "#changeStateDebounceWait",
                                                        "style": "max-width: 360px;",
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "changeValueDebounceMaxWait",
                                                        "props": Object {
                                                          "id": "changeValueDebounceMaxWait",
                                                        },
                                                        "selector": "#changeValueDebounceMaxWait",
                                                        "style": "max-width: 360px;",
                                                      },
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "changeStateDebounceMaxWait",
                                                        "props": Object {
                                                          "id": "changeStateDebounceMaxWait",
                                                        },
                                                        "selector": "#changeStateDebounceMaxWait",
                                                        "style": "max-width: 360px;",
                                                      },
                                                    ]
                                                  }
                                                  templateAreas={
                                                    Array [
                                                      "changeValueDebounceWait changeStateDebounceWait .",
                                                      "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                                    ]
                                                  }
                                                  templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                >
                                                  <StyledComponent
                                                    elements={
                                                      Array [
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "changeValueDebounceWait",
                                                          "props": Object {
                                                            "id": "changeValueDebounceWait",
                                                          },
                                                          "selector": "#changeValueDebounceWait",
                                                          "style": "max-width: 360px;",
                                                        },
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "changeStateDebounceWait",
                                                          "props": Object {
                                                            "id": "changeStateDebounceWait",
                                                          },
                                                          "selector": "#changeStateDebounceWait",
                                                          "style": "max-width: 360px;",
                                                        },
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "changeValueDebounceMaxWait",
                                                          "props": Object {
                                                            "id": "changeValueDebounceMaxWait",
                                                          },
                                                          "selector": "#changeValueDebounceMaxWait",
                                                          "style": "max-width: 360px;",
                                                        },
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "changeStateDebounceMaxWait",
                                                          "props": Object {
                                                            "id": "changeStateDebounceMaxWait",
                                                          },
                                                          "selector": "#changeStateDebounceMaxWait",
                                                          "style": "max-width: 360px;",
                                                        },
                                                      ]
                                                    }
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-htoDjs",
                                                          "isStatic": false,
                                                          "lastClassName": "hAXSqa",
                                                          "rules": Array [
                                                            "
  display: grid;
  grid-template-areas: ",
                                                            [Function],
                                                            ";
  grid-template-columns: ",
                                                            [Function],
                                                            ";
  grid-gap: ",
                                                            [Function],
                                                            ";
  
  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-htoDjs",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    templateAreas={
                                                      Array [
                                                        "changeValueDebounceWait changeStateDebounceWait .",
                                                        "changeValueDebounceMaxWait changeStateDebounceMaxWait .",
                                                      ]
                                                    }
                                                    templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                  >
                                                    <div
                                                      className="sc-htoDjs fEFlnx"
                                                    >
                                                      <Field
                                                        id="changeValueDebounceWait"
                                                        key="0"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="changeValueDebounceWait"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                      <Field
                                                        id="changeStateDebounceWait"
                                                        key="1"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="changeStateDebounceWait"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                      <Field
                                                        id="changeValueDebounceMaxWait"
                                                        key="2"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="changeValueDebounceMaxWait"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                      <Field
                                                        id="changeStateDebounceMaxWait"
                                                        key="3"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="changeStateDebounceMaxWait"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                              </CssGrid>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Section>
                                    </ForwardRef>
                                    <ForwardRef
                                      grid={
                                        Object {
                                          "elements": Array [
                                            Object {
                                              "component": [Function],
                                              "gridArea": "layouts",
                                              "props": Object {
                                                "id": "layouts",
                                              },
                                              "selector": "#layouts",
                                              "style": undefined,
                                            },
                                          ],
                                          "templateAreas": Array [
                                            "layouts layouts layouts",
                                          ],
                                          "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                        }
                                      }
                                      id="layouts"
                                      key="layouts"
                                      size={4}
                                      title="Layouts"
                                    >
                                      <Section
                                        boxes={Array []}
                                        grid={
                                          Object {
                                            "elements": Array [
                                              Object {
                                                "component": [Function],
                                                "gridArea": "layouts",
                                                "props": Object {
                                                  "id": "layouts",
                                                },
                                                "selector": "#layouts",
                                                "style": undefined,
                                              },
                                            ],
                                            "templateAreas": Array [
                                              "layouts layouts layouts",
                                            ],
                                            "templateColumns": "minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)",
                                          }
                                        }
                                        id="layouts"
                                        innerRef={
                                          Object {
                                            "current": <div
                                              class="sc-eqIVtm bImGjh"
                                              id="layouts"
                                            >
                                              <div
                                                class="sc-fAjcbJ cTtLju"
                                              >
                                                Layouts
                                              </div>
                                              <div
                                                class="sc-htoDjs hAXSqa"
                                              />
                                            </div>,
                                          }
                                        }
                                        root={true}
                                        size={4}
                                        title="Layouts"
                                      >
                                        <styled.div
                                          id="layouts"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-eqIVtm",
                                                  "isStatic": false,
                                                  "lastClassName": "bImGjh",
                                                  "rules": Array [
                                                    "
        padding: ",
                                                    [Function],
                                                    ";
        border-bottom: ",
                                                    [Function],
                                                    ";
        &:last-child {
          border-bottom: none;
        }
      ",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-eqIVtm",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={
                                              Object {
                                                "current": <div
                                                  class="sc-eqIVtm bImGjh"
                                                  id="layouts"
                                                >
                                                  <div
                                                    class="sc-fAjcbJ cTtLju"
                                                  >
                                                    Layouts
                                                  </div>
                                                  <div
                                                    class="sc-htoDjs hAXSqa"
                                                  />
                                                </div>,
                                              }
                                            }
                                            id="layouts"
                                          >
                                            <div
                                              className="sc-eqIVtm bImGjh"
                                              id="layouts"
                                            >
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-fAjcbJ",
                                                        "isStatic": false,
                                                        "lastClassName": "cTtLju",
                                                        "rules": Array [
                                                          "
        text-transform: uppercase;
        line-height: 1.1;
        color: inherit;
        font-size: ",
                                                          [Function],
                                                          "px;
        font-weight: ",
                                                          [Function],
                                                          ";
        padding-bottom: ",
                                                          [Function],
                                                          "px;
        margin: 0;
      ",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-fAjcbJ",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-fAjcbJ cTtLju"
                                                  >
                                                    Layouts
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <CssGrid
                                                elements={
                                                  Array [
                                                    Object {
                                                      "component": [Function],
                                                      "gridArea": "layouts",
                                                      "props": Object {
                                                        "id": "layouts",
                                                      },
                                                      "selector": "#layouts",
                                                      "style": undefined,
                                                    },
                                                  ]
                                                }
                                                templateAreas={
                                                  Array [
                                                    "layouts layouts layouts",
                                                  ]
                                                }
                                                templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                              >
                                                <styled.div
                                                  elements={
                                                    Array [
                                                      Object {
                                                        "component": [Function],
                                                        "gridArea": "layouts",
                                                        "props": Object {
                                                          "id": "layouts",
                                                        },
                                                        "selector": "#layouts",
                                                        "style": undefined,
                                                      },
                                                    ]
                                                  }
                                                  templateAreas={
                                                    Array [
                                                      "layouts layouts layouts",
                                                    ]
                                                  }
                                                  templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                >
                                                  <StyledComponent
                                                    elements={
                                                      Array [
                                                        Object {
                                                          "component": [Function],
                                                          "gridArea": "layouts",
                                                          "props": Object {
                                                            "id": "layouts",
                                                          },
                                                          "selector": "#layouts",
                                                          "style": undefined,
                                                        },
                                                      ]
                                                    }
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-htoDjs",
                                                          "isStatic": false,
                                                          "lastClassName": "hAXSqa",
                                                          "rules": Array [
                                                            "
  display: grid;
  grid-template-areas: ",
                                                            [Function],
                                                            ";
  grid-template-columns: ",
                                                            [Function],
                                                            ";
  grid-gap: ",
                                                            [Function],
                                                            ";
  
  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-htoDjs",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    templateAreas={
                                                      Array [
                                                        "layouts layouts layouts",
                                                      ]
                                                    }
                                                    templateColumns="minmax(430px, 430px) minmax(0, 1fr) minmax(0, 1fr)"
                                                  >
                                                    <div
                                                      className="sc-htoDjs hAXSqa"
                                                    >
                                                      <Field
                                                        id="layouts"
                                                        key="0"
                                                      >
                                                        <FieldView
                                                          description=""
                                                          dirty={false}
                                                          disabled={false}
                                                          empty={false}
                                                          errors={Array []}
                                                          excluded={true}
                                                          id="layouts"
                                                          invalid={false}
                                                          label=""
                                                          onStateChange={[Function]}
                                                          onValueChange={[Function]}
                                                          required={false}
                                                          state={Object {}}
                                                        />
                                                      </Field>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                              </CssGrid>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Section>
                                    </ForwardRef>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <Footer
                                actions={
                                  Array [
                                    Object {
                                      "disabled": undefined,
                                      "label": "Cancel",
                                      "onClick": [Function],
                                      "type": "tertiary",
                                    },
                                    Object {
                                      "disable": [Function],
                                      "disabled": false,
                                      "elementRef": Object {
                                        "current": <button
                                          button-type="primary"
                                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                          tabindex="0"
                                          type="button"
                                        >
                                          <span
                                            class="MuiButton-label"
                                          >
                                            Save
                                          </span>
                                          <span
                                            class="MuiTouchRipple-root"
                                          />
                                        </button>,
                                      },
                                      "label": "Save",
                                      "onClick": [Function],
                                      "popover": Object {
                                        "component": [Function],
                                        "open": [Function],
                                        "props": Object {
                                          "onClickField": [Function],
                                        },
                                        "targetRef": Object {
                                          "current": <button
                                            button-type="primary"
                                            class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                            tabindex="0"
                                            type="button"
                                          >
                                            <span
                                              class="MuiButton-label"
                                            >
                                              Save
                                            </span>
                                            <span
                                              class="MuiTouchRipple-root"
                                            />
                                          </button>,
                                        },
                                        "title": "Handle Fields",
                                      },
                                      "type": "primary",
                                    },
                                  ]
                                }
                                aria-label="Footer"
                              >
                                <styled.div
                                  actions={
                                    Array [
                                      Object {
                                        "disabled": undefined,
                                        "label": "Cancel",
                                        "onClick": [Function],
                                        "type": "tertiary",
                                      },
                                      Object {
                                        "disable": [Function],
                                        "disabled": false,
                                        "elementRef": Object {
                                          "current": <button
                                            button-type="primary"
                                            class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                            tabindex="0"
                                            type="button"
                                          >
                                            <span
                                              class="MuiButton-label"
                                            >
                                              Save
                                            </span>
                                            <span
                                              class="MuiTouchRipple-root"
                                            />
                                          </button>,
                                        },
                                        "label": "Save",
                                        "onClick": [Function],
                                        "popover": Object {
                                          "component": [Function],
                                          "open": [Function],
                                          "props": Object {
                                            "onClickField": [Function],
                                          },
                                          "targetRef": Object {
                                            "current": <button
                                              button-type="primary"
                                              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                              tabindex="0"
                                              type="button"
                                            >
                                              <span
                                                class="MuiButton-label"
                                              >
                                                Save
                                              </span>
                                              <span
                                                class="MuiTouchRipple-root"
                                              />
                                            </button>,
                                          },
                                          "title": "Handle Fields",
                                        },
                                        "type": "primary",
                                      },
                                    ]
                                  }
                                  aria-label="Footer"
                                >
                                  <StyledComponent
                                    actions={
                                      Array [
                                        Object {
                                          "disabled": undefined,
                                          "label": "Cancel",
                                          "onClick": [Function],
                                          "type": "tertiary",
                                        },
                                        Object {
                                          "disable": [Function],
                                          "disabled": false,
                                          "elementRef": Object {
                                            "current": <button
                                              button-type="primary"
                                              class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                              tabindex="0"
                                              type="button"
                                            >
                                              <span
                                                class="MuiButton-label"
                                              >
                                                Save
                                              </span>
                                              <span
                                                class="MuiTouchRipple-root"
                                              />
                                            </button>,
                                          },
                                          "label": "Save",
                                          "onClick": [Function],
                                          "popover": Object {
                                            "component": [Function],
                                            "open": [Function],
                                            "props": Object {
                                              "onClickField": [Function],
                                            },
                                            "targetRef": Object {
                                              "current": <button
                                                button-type="primary"
                                                class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                tabindex="0"
                                                type="button"
                                              >
                                                <span
                                                  class="MuiButton-label"
                                                >
                                                  Save
                                                </span>
                                                <span
                                                  class="MuiTouchRipple-root"
                                                />
                                              </button>,
                                            },
                                            "title": "Handle Fields",
                                          },
                                          "type": "primary",
                                        },
                                      ]
                                    }
                                    aria-label="Footer"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dnqmqq",
                                          "isStatic": false,
                                          "lastClassName": "gLTWxr",
                                          "rules": Array [
                                            "
  flex: 0 0 auto;
  display: flex;
  direction: row;
  background: hsla(0,0%,99%,.9);
  opacity: 1;
  padding: 22px;
  box-shadow: 0 -3px 3px 0 hsla(0,0%,75%,.5);
  z-index: 20;
  pointer-events: auto;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-dnqmqq",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      aria-label="Footer"
                                      className="sc-dnqmqq gLTWxr"
                                    >
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-iwsKbI",
                                                "isStatic": false,
                                                "lastClassName": "eAVJAJ",
                                                "rules": Array [
                                                  "
  display: flex;
  direction: row;
  flex-grow: 1;
  justify-content: flex-end;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-iwsKbI",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-iwsKbI eAVJAJ"
                                          >
                                            <styled.div
                                              key="Cancel"
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-gZMcBi",
                                                      "isStatic": false,
                                                      "lastClassName": "cfFiuj",
                                                      "rules": Array [
                                                        "
  margin-left: 15px;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-gZMcBi",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-gZMcBi cfFiuj"
                                                >
                                                  <Button
                                                    label="Cancel"
                                                    onClick={[Function]}
                                                    type="tertiary"
                                                  >
                                                    <WithStyles(ForwardRef(Button))
                                                      button-type="tertiary"
                                                      color="primary"
                                                      onClick={[Function]}
                                                    >
                                                      <ForwardRef(Button)
                                                        button-type="tertiary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "MuiButton-colorInherit",
                                                            "contained": "MuiButton-contained",
                                                            "containedPrimary": "MuiButton-containedPrimary",
                                                            "containedSecondary": "MuiButton-containedSecondary",
                                                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                            "disableElevation": "MuiButton-disableElevation",
                                                            "disabled": "Mui-disabled",
                                                            "endIcon": "MuiButton-endIcon",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "fullWidth": "MuiButton-fullWidth",
                                                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                            "label": "MuiButton-label",
                                                            "outlined": "MuiButton-outlined",
                                                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                            "root": "MuiButton-root",
                                                            "sizeLarge": "MuiButton-sizeLarge",
                                                            "sizeSmall": "MuiButton-sizeSmall",
                                                            "startIcon": "MuiButton-startIcon",
                                                            "text": "MuiButton-text",
                                                            "textPrimary": "MuiButton-textPrimary",
                                                            "textSecondary": "MuiButton-textSecondary",
                                                            "textSizeLarge": "MuiButton-textSizeLarge",
                                                            "textSizeSmall": "MuiButton-textSizeSmall",
                                                          }
                                                        }
                                                        color="primary"
                                                        onClick={[Function]}
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          button-type="tertiary"
                                                          className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                          component="button"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          focusVisibleClassName="Mui-focusVisible"
                                                          onClick={[Function]}
                                                          type="button"
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            button-type="tertiary"
                                                            className="MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            component="button"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            focusVisibleClassName="Mui-focusVisible"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <button
                                                              button-type="tertiary"
                                                              className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={0}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiButton-label"
                                                              >
                                                                Cancel
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={false}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={false}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Button)>
                                                    </WithStyles(ForwardRef(Button))>
                                                  </Button>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <styled.div
                                              key="Save"
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-gZMcBi",
                                                      "isStatic": false,
                                                      "lastClassName": "cfFiuj",
                                                      "rules": Array [
                                                        "
  margin-left: 15px;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-gZMcBi",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-gZMcBi cfFiuj"
                                                >
                                                  <Button
                                                    disable={[Function]}
                                                    disabled={false}
                                                    elementRef={
                                                      Object {
                                                        "current": <button
                                                          button-type="primary"
                                                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                          tabindex="0"
                                                          type="button"
                                                        >
                                                          <span
                                                            class="MuiButton-label"
                                                          >
                                                            Save
                                                          </span>
                                                          <span
                                                            class="MuiTouchRipple-root"
                                                          />
                                                        </button>,
                                                      }
                                                    }
                                                    label="Save"
                                                    onClick={[Function]}
                                                    popover={
                                                      Object {
                                                        "component": [Function],
                                                        "open": [Function],
                                                        "props": Object {
                                                          "onClickField": [Function],
                                                        },
                                                        "targetRef": Object {
                                                          "current": <button
                                                            button-type="primary"
                                                            class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                            tabindex="0"
                                                            type="button"
                                                          >
                                                            <span
                                                              class="MuiButton-label"
                                                            >
                                                              Save
                                                            </span>
                                                            <span
                                                              class="MuiTouchRipple-root"
                                                            />
                                                          </button>,
                                                        },
                                                        "title": "Handle Fields",
                                                      }
                                                    }
                                                    type="primary"
                                                  >
                                                    <WithStyles(ForwardRef(Button))
                                                      button-type="primary"
                                                      color="primary"
                                                      disabled={false}
                                                      onClick={[Function]}
                                                      variant="contained"
                                                    >
                                                      <ForwardRef(Button)
                                                        button-type="primary"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "MuiButton-colorInherit",
                                                            "contained": "MuiButton-contained",
                                                            "containedPrimary": "MuiButton-containedPrimary",
                                                            "containedSecondary": "MuiButton-containedSecondary",
                                                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                            "disableElevation": "MuiButton-disableElevation",
                                                            "disabled": "Mui-disabled",
                                                            "endIcon": "MuiButton-endIcon",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "fullWidth": "MuiButton-fullWidth",
                                                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                            "label": "MuiButton-label",
                                                            "outlined": "MuiButton-outlined",
                                                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                            "root": "MuiButton-root",
                                                            "sizeLarge": "MuiButton-sizeLarge",
                                                            "sizeSmall": "MuiButton-sizeSmall",
                                                            "startIcon": "MuiButton-startIcon",
                                                            "text": "MuiButton-text",
                                                            "textPrimary": "MuiButton-textPrimary",
                                                            "textSecondary": "MuiButton-textSecondary",
                                                            "textSizeLarge": "MuiButton-textSizeLarge",
                                                            "textSizeSmall": "MuiButton-textSizeSmall",
                                                          }
                                                        }
                                                        color="primary"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        variant="contained"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          button-type="primary"
                                                          className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                          component="button"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          focusVisibleClassName="Mui-focusVisible"
                                                          onClick={[Function]}
                                                          type="button"
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            button-type="primary"
                                                            className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            component="button"
                                                            disabled={false}
                                                            focusRipple={true}
                                                            focusVisibleClassName="Mui-focusVisible"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <button
                                                              button-type="primary"
                                                              className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={0}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiButton-label"
                                                              >
                                                                Save
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={false}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={false}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Button)>
                                                    </WithStyles(ForwardRef(Button))>
                                                  </Button>
                                                  <Popover
                                                    component={[Function]}
                                                    open={[Function]}
                                                    props={
                                                      Object {
                                                        "onClickField": [Function],
                                                      }
                                                    }
                                                    targetRef={
                                                      Object {
                                                        "current": <button
                                                          button-type="primary"
                                                          class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                                                          tabindex="0"
                                                          type="button"
                                                        >
                                                          <span
                                                            class="MuiButton-label"
                                                          >
                                                            Save
                                                          </span>
                                                          <span
                                                            class="MuiTouchRipple-root"
                                                          />
                                                        </button>,
                                                      }
                                                    }
                                                    title="Handle Fields"
                                                  />
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Footer>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </ItemView>
                    </Item>
                  </div>
                </StyledComponent>
              </styled.div>
            </BaseItem>
          </Form>
        </div>
      </StyledComponent>
    </styled.div>
  </FormEditor>
</ThemeProvider>
`;
